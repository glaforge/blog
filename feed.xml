<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cédric Champeau's blog</title>
    <link>http://melix.github.io/blog/</link>
    <atom:link href="http://melix.github.io/blog//feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Mon, 19 Jan 2015 20:09:16 +0100</pubDate>
    <lastBuildDate>Mon, 19 Jan 2015 20:09:16 +0100</lastBuildDate>

    <item>
      <title>Looking for a new job</title>
      <link>http://melix.github.io/blog/2015/01/for-hire.html</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2015/01/for-hire.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_will_you_be_the_new_groovy_sponsor&quot;&gt;Will you be the new Groovy sponsor?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There we are, today is sad news as Pivotal &lt;a href=&quot;http://blog.pivotal.io/pivotal/news-2/groovy-2-4-and-grails-3-0-to-be-last-major-releases-under-pivotal-sponsorship&quot;&gt;announced that they wouldn&amp;#8217;t sponsor the development of the Groovy language&lt;/a&gt;, as well as its long time friend the Grails framework, starting from march 31st. As I was paid to work on Groovy, it has a direct consequence for me: starting from April 1st, I am &lt;strong&gt;for hire&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It was hard to keep this secret for weeks, but now that everything is public, it is easier for us. I have been lucky to work full time on the Groovy language for a bit more than 3 years now. Lucky because it was both a great open-source software and my passion. I have implemented major features of the language &lt;a href=&quot;https://github.com/groovy/groovy-core/graphs/contributors&quot;&gt;since Groovy 1.8&lt;/a&gt;: static type checking, static compilation, Android support, numerous AST transformations, continous integration&amp;#8230; I have given talks to various conferences, including world class ones like JavaOne, Devoxx, GR8Conf or SpringOne2GX and it was a fantastic opportunity that wouldn&amp;#8217;t have been possible without the support from VMware then Pivotal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However I feel that &lt;strong&gt;I still have a lot to do&lt;/strong&gt;. So many things are on the list, so much to improve, like for example adding language support for asynchronous programming, improved Java 8 support, a new meta-object protocol, not forgetting, of course, bugfixes&amp;#8230; I am 100% convinced that the language wouldn&amp;#8217;t have reached the level of maturity it has without support from a company like Pivotal. And even though Java is considered mature, it doesn&amp;#8217;t mean that the language shouldn&amp;#8217;t continue to evolve: it is rather the opposite. People are constantly asking for evolutions, because programming models evolve too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those reasons, my #1 choice would be to find a new company securing the development of Groovy and Grails, that is to say willing to pay me and my mates to continue working on them. The Groovy community is huge, there are lots of companies using Groovy in a variety of domains, I sincerely hope this is possible. With more than 4 million downloads in 2014, I can&amp;#8217;t imagine how many hours of development have been saved thanks to Groovy and Grails&amp;#8230; Should you be interested in sponsoring our projects, please write to &lt;a href=&quot;mailto:sponsorship@groovy-lang.org&quot;&gt;sponsorship@groovy-lang.org&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_about_me&quot;&gt;About me&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If unfortunately we can&amp;#8217;t find third parties willing to take over the development of the language and hire us, then I would obviously be available to help you in your projects. For those of you who are looking for someone with a good knowledge of the JVM internals, I am listening. My areas of interest:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;R&amp;amp;D&lt;/strong&gt;: innovation, technical challenges are what drive my motivation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;open-source&lt;/strong&gt; over closed-source: If you are an Open-Source company, by that I mean a company which contributes Open-Source, I think we are on the same line. I love to share what I do and I am convinced that open-source development is the best way to improve the global quality of a project. I have worked on closed-source software in the past, there are good reasons to do so but working on OSS software is really what I prefer. I also enjoy &lt;a href=&quot;https://speakerdeck.com/melix/&quot;&gt;speaking publicly&lt;/a&gt; about projects I work on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JVM&lt;/strong&gt;: I have spent most of my career on that platform and believe me, it&amp;#8217;s not dead :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;back-end&lt;/strong&gt; over front-end: I love working on tooling, performance tuning, algorithmics&amp;#8230; everything that is hidden to the end user. On the other side I am not so good on the front-end part (HTML, CSS, &amp;#8230;) so it would probably not be a good idea to make me work on that topic :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;remote working&lt;/strong&gt;: I live in Saint Hilaire de Loulay, a small countryside town near Nantes, in France. I have now been working from home for more that 3 years, most of the Spring Framework team works that way, and it has been very successful so far. If you are not against the idea, I would love to continue that way.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In any case if you think a profile like mine is interesting for your company, you can contact me or ask for my résumé at &lt;a href=&quot;mailto:cedric.champeau@gmail.com&quot;&gt;cedric.champeau@gmail.com&lt;/a&gt;. Meanwhile, rest assured that we are focused and we will soon release Groovy 2.4 to prove that!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>10 things your static language can&amp;#8217;t do</title>
      <link>http://melix.github.io/blog/2014/12/10-things-static-cant-do.html</link>
      <pubDate>Mon, 15 Dec 2014 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2014/12/10-things-static-cant-do.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_but_maybe_mine_can&quot;&gt;But maybe mine can&amp;#8230;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those of you who do not know me, and you are likely much more in that category than in the other, I&amp;#8217;ve been working on
the Groovy language full-time for more than 3 years now. I started as a user several years ago, in the context of DSLs,
and eventually became a contributor before getting employed to work on the language. I love static typing, but not at the
point of thinking that we should only reason about types. This is why I also love dynamic typing, and why I invested so
much in Groovy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Groovy is primarily a dynamic language. It is probably the most widely used alternative language on the JVM, with use cases ranging
from DSLs (scripting Jenkins builds for example) to full blown applications on mobile devices (Android), going through
full stack web applications with Grails. Despite being primarily a dynamic language, I spent a lot of time writing a
&lt;strong&gt;static compiler for Groovy&lt;/strong&gt;, making it a pretty unique language in the JVM world, but not limited to the JVM world:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Groovy is a language which supports &lt;strong&gt;dynamic typing and compile-time type checking&lt;/strong&gt;. It makes it surprisingly powerful
and versatile language, capable of adapting to a great variety of contexts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I tell people that I wrote the static compiler for Groovy, I often get a reaction which is &quot;so you admit that dynamic
languages are less powerful than static ones&quot;, and they see me as the one that made the language &lt;strong&gt;right&lt;/strong&gt;. Oh no, I did not.
In fact, I love the dynamic aspects of the language. It is always annoying that I, as a designer of a static compiler, have
to defend dynamic languages, but it&amp;#8217;s an interesting topic, especially those days where I read lots of articles doing
dynamic-bashing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So in this post, I&amp;#8217;m going to illustrate 10 things that a static language (most likely) cannot do. It doesn&amp;#8217;t mean that there are only
10 things that a static language cannot do compared to a dynamic one, but it is here to illustrate the fact that this idea
that static languages are superior or more scalable just because they are &lt;em&gt;type safe&lt;/em&gt; is IMHO stupid. Compare languages between
them, but do not compare categories of languages. While static languages will be excellent in making type safety guarantees (errors
at compile time), dynamic languages are often far superior in cutting down verbosity. That&amp;#8217;s just an example which illustrates
that comparing on the sole aspect of type safety is not enough.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post I will also illustrate how Groovy is special, because it is capable of handling things in a &lt;strong&gt;mixed&lt;/strong&gt; mode, making it
totally unique and incredibly powerful, bringing the best of the two worlds together. Last disclaimer, this post is mostly centered on
the JVM world, because this is the one I know the best.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
As expected I got lots of comments on various social media. Some are positive, some not, that&amp;#8217;s ok, but again, I
would like to remember that this is &lt;strong&gt;not&lt;/strong&gt; static languages bashing, nor dynamic languages promotion. Maybe some of you
will think &quot;hey, but my static language can do it!&quot; and yes, it is possible, because as the subtitle of this post says,
mine can too. But when it does, often, there&amp;#8217;s a drawback (like loosing type safety, decreased performance,&amp;#8230; ) or you fall on
dynamic behavior without even noticing it. When it is the case, I tried to be honest and tell about the possibilities. But I also
voluntarily hide some static features of Groovy that make it a very interesting solution (flow typing for example). Last but not
least, I am not saying that &lt;strong&gt;all&lt;/strong&gt; dynamic features implement &lt;strong&gt;all&lt;/strong&gt; those items. I am saying that by nature a dynamic language make
it possible. An possible doesn&amp;#8217;t mean required. So please read carefully before screaming!
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ready?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_10_object_oriented_programming_done_right&quot;&gt;10. Object-oriented programming done right&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a very academic point of view. Users of static languages tend to think that their language is object-oriented. Because C++
has a compiler, because Java has a compiler, means that statically typed languages have to be compiled. Object oriented programming
does &lt;strong&gt;not&lt;/strong&gt; require languages to be compiled. OOP is about &lt;strong&gt;message passing&lt;/strong&gt;. Object-oriented programming does &lt;strong&gt;not&lt;/strong&gt; imply type safety.
It means that an object is something that receives messages. In the Java world, the message is a method with arguments, and the contract
is enforced at compile time, but it is an implementation detail which reduces OO programming to a small subset of its capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The great Alan Kay himself &lt;a href=&quot;http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html&quot;&gt;explains it&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Groovy, as a dynamic language, supports commons OOP concepts (and also functional concepts) like class, interface, abstract classes or traits
but also has a meta-object protocol. For those of you who did Smalltalk programming, it&amp;#8217;s the same idea: the behavior of objects is not determined at compile time, it&amp;#8217;s a runtime behavior determined by a meta-object protocol. In Groovy, it translates to the fact that to each class corresponds
a meta-class which determines the behavior that an object will have when it receives a message (a method call).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This capability of doing things at runtime instead of compile time is the core of many features of dynamic languages and most of the
points illustrated in this blog post derive from it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I had some comments that the fact that dynamic languages can do OO right wasn&amp;#8217;t really interesting. In fact, I insisted on keeping this
because this is actually what makes most of the following items possible. So think of 10. as the basement for most of the following items.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_9_multimethods&quot;&gt;9. Multimethods&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java supports overloaded methods. The question whether it is a good or a bad idea is beyond the scope of this post (and believe me
it is a very interesting question both in terms of semantics and performance). The idea is that an object can have two methods
of the same name accepting different parameters. Let&amp;#8217;s illustrate this with Java code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint java language-java&quot;&gt;&lt;code&gt;public static int foo(String o) { return 1; }
public static int foo(Date o) { return 2; }
public static int foo(Object o) { return 3; }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you call it like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint java language-java&quot;&gt;&lt;code&gt;public static void main(String[] args) {
    Object[] array = new Object[] { &quot;a string&quot;, new Date(), 666 };
    for (Object o : array) {
        System.out.println(foo(o));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What do you think it prints? Well, most beginners will probably answer something that looks natural when you know the contents of the array:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;1
2
3&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But the correct answer is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;3
3
3&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because the static type of &lt;code&gt;o&lt;/code&gt; when the call to &lt;code&gt;foo&lt;/code&gt; is made is &lt;code&gt;Object&lt;/code&gt;. To say it more clearly, the declared type of &lt;code&gt;o&lt;/code&gt; is &lt;code&gt;Object&lt;/code&gt; so we are calling &lt;code&gt;foo(Object)&lt;/code&gt;. The reason for this is that the code is &lt;strong&gt;statically compiled&lt;/strong&gt; so the compiler has to know at compile time which method is going to be called. A dynamic language like Groovy chooses the method at runtime (unless, of course, you use &lt;code&gt;@CompileStatic&lt;/code&gt; to enforce static semantics), so the method which is going to be called corresponds to the &lt;strong&gt;best fitting arguments&lt;/strong&gt;. So Groovy, unlike Java, will print the less surprising result:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;1
2
3&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is theorically possible for a static language to do the same. But it comes at the price of performance. It would mean that the arguments have to be checked at runtime, and since static languages do not, as far as I know, implement an inlining cache, performance would be lower than those of a well designed dynamic language&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But to add something to a dynamic language, what if you remove the &lt;code&gt;Object&lt;/code&gt; version of &lt;code&gt;foo&lt;/code&gt;, and remove &lt;code&gt;666&lt;/code&gt; from the array? As an exercise to the reader, would this Java code compile?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint java language-java&quot;&gt;&lt;code&gt;public static int foo(String o) { return 1; }
public static int foo(Date o) { return 2; }

public static void main(String[] args) {
    Object[] array = new Object[] { &quot;a string&quot;, new Date() };
    for (Object o : array) {
        System.out.println(foo(o));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If not, what do you have to do to make it pass? Yes, dynamic languages are superior here&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_8_duck_typing&quot;&gt;8. Duck typing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Duck typing has always been a selling point of dynamic languages. Basically imagine two classes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;class Duck {
   String getName() { &apos;Duck&apos; }
}
class Cat {
   String getName() { &apos;Cat&apos; }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Those two classes define the same &lt;code&gt;getName&lt;/code&gt; method, but it is not defined explicitly in a contract (for example through an interface). There are many reasons why this can happen. For example, you didn&amp;#8217;t write those classes, they are in a third party library and for some reason those methods were not intended to be part of the contract. Imagine that you have a list of objects containing either ducks, cats, or anything else definining a &lt;code&gt;getName&lt;/code&gt; method. Then a dynamic language will let you call that method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;def list = [cat, dog, human, hal]
list.each { obj -&amp;gt;
   println obj.getName()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A static language like Java would force you to have a cast here. But since you don&amp;#8217;t have an interface defining &lt;code&gt;getName&lt;/code&gt; and implemented by all objects, you cannot cast to that type so you have to consider all types and delegate appropriately like in the following code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint java language-java&quot;&gt;&lt;code&gt;if (obj instanceof Cat) {
   return ((Cat)obj).getName();
}
if (obj instanceof Duck) {
   return ((Duck)obj).getName();
}
if (obj instanceof Human) {
   return ((Human)obj).getName();
}
if (obj instanceof Computer) {
   return ((Computer)obj).getName();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The real solution in Java is to define either a common super class or an interface for all those, but again, sometimes you just cannot because you don&amp;#8217;t have access to the code! Imagine that the &lt;code&gt;Cat&lt;/code&gt; and &lt;code&gt;Dog&lt;/code&gt; classes where designed like this for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint java language-java&quot;&gt;&lt;code&gt;public abstract class Something {} // should define getName, but does not for some obscure reason
public class Cat extends Something {
   public String getName() { return &quot;Cat&quot;; }
}
public class Dog extends Something {
   public String getName() { return &quot;Dog&quot;; }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Often the developer didn&amp;#8217;t even realize that all objects share a common interface. That&amp;#8217;s bad for you, and if you find this code you have no choice but the cascading &lt;em&gt;instanceof&lt;/em&gt; solution. There are multiple issues with that code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;it is very repetitive, the only thing which changes is the type used in the test and the cast&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it has to be extensive, that is to say that if your list happens to contain an object having a &lt;code&gt;getName&lt;/code&gt; method but not in your list of cases to consider, the code is broken. This means that you have to think about changing that method if you add a new type in your list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;in the JVM world, as the number of cases to consider grows, the size of the method will increase to the point where the JIT (just-in-time compiler) decides it&amp;#8217;s not worth inlining, potentially dramatically reducing performance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, one may say &quot;but why the hell didn&amp;#8217;t you use an interface&quot;. This is of course a good way to solve this in Java, but it is not always possible. Not for example if you don&amp;#8217;t have access to the source code (think of the various classes being split in third party libraries). I often faced this problem in the past, and believe me it&amp;#8217;s no fun (I look at you, &lt;em&gt;Apache Lucene&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are actually alternatives for static languages. In Java, you could use a reflective proxy: define an interface, then create a proxy implementing that interface which will delegate to the appropriate &lt;code&gt;getName&lt;/code&gt; method. Of course it is overkill: for each object of your list you have a proxy instantiated&amp;#8230; Another option, again in Java, is to make the call reflective. But in that case, the call becomes slow and in fact, what you are doing is a dynamic call like a dynamic language would do. A language like Groovy doesn&amp;#8217;t have that problem because it implements smart techniques like call site caching and runtime bytecode generation which make it much faster than what a reflective call would do&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An elegant alternative used by other static languages is &lt;strong&gt;structural typing&lt;/strong&gt;. This is for example what the &lt;code&gt;Go&lt;/code&gt; language does. In this case, you define an interface, but the object does not have to explicitly implement the interface: the fact that the object defines a method corresponding to the method in the interface is enough to implement it. This is elegant but it changes the semantics of an interface as you define it in Java. Last but not least, this technique cannot be used on a platform like the JVM, because the virtual machine has no way to do it. Well, this is not totally true since now we have the &lt;em&gt;invokedynamic&lt;/em&gt; bytecode instruction but guess what? You are relying on a &lt;em&gt;dynamic&lt;/em&gt; feature of the VM&amp;#8230; Can you hear it?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Some argued that this is very bad design. I must repeat that if you think so, you missed the point. The idea is to &lt;strong&gt;workaround poorly designed
APIs&lt;/strong&gt; (or APIs which were &quot;optimized&quot;). When I talked about &lt;em&gt;Lucene&lt;/em&gt; it was for a very good reason. I faced the problem. &lt;em&gt;Lucene&lt;/em&gt; is a highly
optimized piece of code. It makes design decisions which are often based on performance: flattening as much as possible class hierarchies (the HotSpot
JIT doesn&amp;#8217;t like deep class hierarchies), make classes final, prefer abstract classes over interfaces, &amp;#8230; So it is easy to find classes that you want
to extend, but you can&amp;#8217;t because they are final, or classes that implicitly implement a contract but do not define interfaces. This is a pain to work
with, and the ability of a dynamic language to be able to call such methods without having to explicitly declare a contract is a real gain. Some
static languages offer similar features through structural typing, but then you have to think about what it means (virtual table lookup?) and how
it is implemented depending on the platform (on the JVM, relying on reflection is possible but you loose all type safety and have very bad performance). So everytime I used duck typing, it wasn&amp;#8217;t on APIs that &lt;strong&gt;I&lt;/strong&gt; had designed. It was on 3rd party APIs, that for some reason didn&amp;#8217;t provide
me with a way to call some methods.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_7_respond_to_non_existing_methods&quot;&gt;7. Respond to non-existing methods&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A dynamic language answers to messages (method calls) at runtime. This means that a well designed dynamic language should be able to let you answer &lt;strong&gt;any&lt;/strong&gt; kind of method call, including&amp;#8230; non existing methods! This feature is at the core of powerful facilitating frameworks like Grails. In Grails, you can define a domain class like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;class Person {
   String firstName
   String lastName
   int age
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Person&lt;/code&gt; class does not define any method, nor does it have any explicit relation to a datastore, an ORM or SQL server. However, you can write code like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;def adults = Person.findByAge { it&amp;gt;= 18 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will not dig into the details about how this is done, but the idea is to intercept the fact that the &lt;code&gt;findByAge&lt;/code&gt; method does not exist, then parse the name of the method and build a query based on the method name and the rest of the arguments (here, a closure, an open block of code). Queries can be as complex as you wish, like &lt;code&gt;findByLastNameAndAge&lt;/code&gt; or whatever you can think of. Of course Grails does some smart things here, like &lt;strong&gt;generating a new method at runtime&lt;/strong&gt;, so that the next time this method is hit, it is not an unknown method anymore, and can be invoked faster! Only a dynamic language would let you do that. Say bye to infamous DAOs that you have to change everytime you have
a new query, it is not necessary. One could say that they prefer safety at compile time rather than the ability to do this, but Grails also offers that possibility of checking that the syntax is correct at compile time, while still leveraging the dynamic runtime to make this work&amp;#8230; It&amp;#8217;s all about boilerplate removed, code verbosity and productivity&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The ability to react to arbitrary messages is actually at the core of many DSLs (domain specific languages) written in Groovy. They are at the core of builders for example, which will let you write code like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;catalog {
   book {
   	isbn 123
	name &apos;Awesome dynamic languages&apos;
        price 11.5
        tags {
	   dynamic,
	   groovy,
	   awesome
	}
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of the less readable Java 8 version (for the reader&amp;#8217;s mental sanity, I will not write the Java 7 version):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint java language-java&quot;&gt;&lt;code&gt;builder.catalog( (el) -&amp;gt; {
  el.book ( (p) -&amp;gt; {
     p.setISBN(&quot;123&quot;);
     p.setName(&quot;Awesome dynamic languages&quot;);
     p.setPrice(11.5);
     p.setTags(&quot;dynamic&quot;,&quot;groovy&quot;,&quot;awesome&quot;);
  })
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_6_mocking_and_monkey_patching&quot;&gt;6. Mocking and monkey-patching&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mocking is at the core of many unit testing strategies. Most of static languages make use of an external library to do this. Why this can be true of dynamic languages too, this is often not strictly necessary. For example Groovy offers built-in stubbing/mocking capabilities, very easily thanks to its dynamic nature. Monkey patching rely on the very same behavior but is easier to explain so I will illustrate this concept here. Imagine that you use a closed-source library (I won&amp;#8217;t judge you, I promise) or an open-source library for which you don&amp;#8217;t want to/don&amp;#8217;t have time to contribute to, but you have found a serious security issue in a method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint java language-java&quot;&gt;&lt;code&gt;public class VulnerableService {
   public void vulnerableMethod() {
      FileUtils.recurseDeleteWithRootPrivileges(&quot;/&quot;);
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You know how to fix it, but you have to wait for the maintainer to upgrade the library. Unfortunately, you can&amp;#8217;t wait because attackers are already leveraging the vulnerability on your production server (yeah, they like to). One option that a dynamic language can let you do is redefine the method at runtime. For example, in Groovy, you could write:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;VulnerableService.metaClass.vulnerableMethod = {
   println &quot;Well tried, but you have been logged to Santa&apos;s naughty guys list!&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then a caller that would call the vulnerableMethod would call the monkey-patched version instead of the original one. Of course in a language like Groovy, this would only be true if the callee is dynamically compiled: if you use &lt;code&gt;@CompileStatic&lt;/code&gt; to behave like a static compiler, you&amp;#8217;re out of luck, because the method which will be invoked is selected at compile time, so you &lt;strong&gt;will&lt;/strong&gt; be vulnerable even if you try to monkey patch&amp;#8230; Groovy provides other extension mechanisms to work around this, but it&amp;#8217;s not the topic here ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_5_dynamic_objects&quot;&gt;5. Dynamic objects&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most dynamic languages let you create&amp;#8230; dynamic objects. It is basically an object for which you attach methods and properties &lt;em&gt;at runtime&lt;/em&gt;. Not that I am a big fan of it but there are some valid use cases (serialization, languages like &lt;a href=&quot;https://github.com/golo-lang/golo-lang/&quot;&gt;Golo&lt;/a&gt; not supporting classes, prototype based construction, &amp;#8230;). It can also be convenient if you want to rapidly prototype a class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an example, let&amp;#8217;s see how you could create an arbitrary object to represent a person, without actually leveraging on a class, using the Groovy language:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;def p = new Expando()
p.name = &apos;Cédric&apos;
p.sayHello = { println &quot;Hello $name&quot; }

p.sayHello()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code is totally dynamic here. It lets you create an arbitrary object, attach new methods to it, data, &amp;#8230;, without relying on strong typing. Of course it is interesting when you see that the &lt;code&gt;sayHello&lt;/code&gt; method is capable of referencing &quot;pseudo-fields&quot; which are themselves dynamic!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_4_scripting&quot;&gt;4. Scripting&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Static languages can do scripting. But it is definitely not what I would call scripting. Having to write types is not natural in a script. I even worked in the past in a context where people who wrote scripts where not programmers. They didn&amp;#8217;t even know what a type is, and they don&amp;#8217;t care. The most popular scripting technologies like Bash do not have types, and it&amp;#8217;s not a problem, so imagine the following. You arrive late at your office, your boss is very angry about that and shouts to you: &quot;you have 5 minutes, not more, to give me the total number of followers of users who have submitted an accepted pull request on the Groovy repo recently&quot;. It&amp;#8217;s a weird query, most probably your boss is going into social networking madness but you have no choice otherwise you&amp;#8217;re fired.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In that case, most developers would think of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;using a Bash script combining &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, regular expressions and hoping that &lt;code&gt;man&lt;/code&gt; works&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;using a tool they know like Java, but since they have so little time, they will probably rely on a regular expression to parse the JSON feed until they realize they have to do a second HTTP query for each user&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;quiting their job&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Groovy, you would do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;import groovy.json.JsonSlurper

def json = new JsonSlurper().parse(&apos;https://api.github.com/repos/groovy/groovy-core/issues?state=closed&apos;.toURL())
json.user.collectEntries { u -&amp;gt;
   // second query to fetch the nb of followers
   def followers = new JsonSlurper().parse(u.followers_url.toURL())
   [u.login,followers.size()]
}.values().sum()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What you can see here is that we use a facility, &lt;code&gt;JSonSlurper&lt;/code&gt; which actually parses the JSON result. It is much more reliable that what you would have done with a quick hack like a regex, but not only:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;all data is accessible in a path-like fashion (&lt;code&gt;json.user.address.city.postalCode&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;you don&amp;#8217;t need a single type here&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even if you use a smart JSON parser with your static language, you would still have to write a collection of classes to unmarshall the JSON structure into beans/classes. For such a simple use case, you really don&amp;#8217;t care. You just want things done, easily, quickly. You don&amp;#8217;t need type safety. You don&amp;#8217;t need it to be super clean and tolerant to future changes of the JSON format. Get. Things. Done. (and boss happy).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_3_runtime_coercions&quot;&gt;3. Runtime coercions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another thing that dynamic languages are particularily good at is runtime coercions. In general static languages users know about one type of conversion, which is casting. Some are lucky enough to know about coercion (like the use of &lt;em&gt;implicit&lt;/em&gt; in &lt;em&gt;Scala&lt;/em&gt;), the others rely on the adapter pattern. In a dynamic language, runtime coercions are often easy to implement. A coercion differs from a cast in the sense that you want to convert an object of &lt;code&gt;class A&lt;/code&gt; to an object of &lt;code&gt;class B&lt;/code&gt;, but a &lt;code&gt;B&lt;/code&gt; cannot be assigned to an &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Groovy provides &quot;natural&quot; conversions for some widely used types: lists to objects, and maps to object, like in the example here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;Point p = [1,2] // coercion of a list literal into an object of class Point thanks to constructor injection
Point p = [x:1, y:2] // coercion of a map literal into an object of class Point thanks to setter injection&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But if it happened to be that you cannot use maps or lists but really want to convert one type to another, you can just declare a converter:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;class A {
   Object asType(Class&amp;lt;?&amp;gt; clazz) { new B(...) }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I can see you raising an eyebrow here, because I wrote the conversion code directly in class &lt;code&gt;A&lt;/code&gt;, but remember it&amp;#8217;s a dynamic language with a meta-object protocol, so nothing prevents you from writing this conversion code &lt;strong&gt;outside&lt;/strong&gt; of the class &lt;code&gt;A&lt;/code&gt; itself, through its metaclass, which would let you add conversion algorithms for classes which are beyond your control. It&amp;#8217;s a win!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_2_dynamic_binding&quot;&gt;2. Dynamic binding&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dynamic binding is linked to DSL evaluation and scripting. Imagine the following script:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;a+b&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this script, variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are &lt;code&gt;unbound&lt;/code&gt;. They are not known from a compiler, so if you tried to statically compile this with a compiler like &lt;em&gt;Java&lt;/em&gt; (or &lt;em&gt;C++&lt;/em&gt;, or &lt;em&gt;Scala&lt;/em&gt;) it would definitely blow up. Not if you compile this with &lt;em&gt;Groovy&lt;/em&gt;. Because it&amp;#8217;s dynamic, it&amp;#8217;s able to know that those variables &lt;strong&gt;will&lt;/strong&gt; be eventually bound, when the script is executed. Groovy provides means to &lt;em&gt;inject&lt;/em&gt; those variables when you need them. It is some kind of late binding, but it is the core of expression languages, and it is no surprise that products like &lt;a href=&quot;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/modules-scripting.html#modules-scripting&quot;&gt;ElasticSearch&lt;/a&gt; uses &lt;a href=&quot;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/modules-scripting.html#modules-scripting&quot;&gt;Groovy as the default scripting language&lt;/a&gt;: it allows it to be both compilable and late bound. But there is more, if you think you have an issue with not being able to resolve &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; at compile time and that you fear to write code which might fail at runtime&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_1_mixed_mode_compilation&quot;&gt;1. Mixed mode compilation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last thing that a dynamic language like Groovy is capable of doing is leveraging &lt;strong&gt;mixed mode&lt;/strong&gt; compilation. Behind this curious term is a unique concept in programming languages: Groovy is able of mixing static code with dynamic code, but more, you can instruct the compiler how to do so. So if you design a DSL like in &lt;a href=&quot;http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.4/modules-scripting.html#modules-scripting&quot;&gt;ElasticSearch&lt;/a&gt; where you know that some variables will be bound, that the number, names and &lt;strong&gt;types&lt;/strong&gt; of those variables are fixed and known in advance, then you can instruct the compiler and switch to a statically compilable mode! This means that if the user uses an unknown variable, compilation will fail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This technique is already used in Groovy itself, in the powerful &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/documentation/markup-template-engine.html&quot;&gt;Markup Template Engine&lt;/a&gt;. It is a template engine which is capable of generating markup-like contents with a very nice builder-like syntax, but all templates are statically compiled even if the code seems to be full of unresolved method calls or variables!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those who are interested in this, I invite them to take an eye at my &lt;a href=&quot;http://melix.github.io/blog/2014/02/markuptemplateengine.html&quot;&gt;blog posts&lt;/a&gt; describing how you can do this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;_conclusion&quot; class=&quot;sect0&quot;&gt;Conclusion&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In conclusion, I have highlighted some points where dynamic languages can do what static languages cannot. Users of the most widely used dynamic language, Javascript, probably have lots of ideas too. The point for me is &lt;strong&gt;not to tell which one is better than the other&lt;/strong&gt; because &lt;strong&gt;I don&amp;#8217;t care&lt;/strong&gt;. In general, I am not much into the war behind those, because I really enjoy both. I do static typing most of time, but I really enjoy the dynamic nature of the language too because often I don&amp;#8217;t want to be slowed down just to make a compiler happy. I, as a developer, should be happy. Making a compiler happy is secondary and often not necessary. Last but not least, you might have thought, reading this post, that &lt;strong&gt;your&lt;/strong&gt; static language can do this or that. I won&amp;#8217;t blame you here, because mine can too. The idea here is more to show that it is totally unnatural for a static language or it often comes with horrible drawbacks like verbosity, performance issues or simply difficult to implement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So what about using a &lt;a href=&quot;http://beta.groovy-lang.org&quot;&gt;language that brings the best of the two worlds together&lt;/a&gt;?&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Fixing Bluetooth debugging on Android Wear</title>
      <link>http://melix.github.io/blog/2014/10/android-moto360.html</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">2014/10/android-moto360.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have been working on making &lt;a href=&quot;http://beta.groovy-lang.org&quot;&gt;Groovy&lt;/a&gt; work on Android for several months now. In the last weeks, I even
showed at SpringOne2GX an example of an application written in Groovy that worked on Android Wear. However, that code
worked in an emulator. Recently, I got a real device, a Moto 360, so I wanted to see that application running on a
real device. For some very obscure (understand buggy Android SDK) reason, it was far from being that easy&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I litteraly spent &lt;strong&gt;hours&lt;/strong&gt; trying to figure out what was wrong, so I thought it would be interesting for those of you
who face the same problem to have a blog post that explains how to deal with it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_problem&quot;&gt;The problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you follow the instructions on the &lt;a href=&quot;https://developer.android.com/training/wearables/apps/bt-debugging.html&quot;&gt;Android documentation&lt;/a&gt;
about how to enable bluetooth debugging, it&amp;#8217;s in the end pretty simple. Basically, it&amp;#8217;s about enabling USB debugging on your physical
handheld, then enable bluetooth debugging on your wearable, and in the end enable bluetooth debugging in the Android Wear companion app.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The guide says:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Android Wear companion app, you should see the status change to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Host: connected
Target: connected&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, whatever I did, the &lt;code&gt;Target: connected&lt;/code&gt; line never appeared for me. It was &lt;strong&gt;always&lt;/strong&gt; &lt;code&gt;Target: disconnected&lt;/code&gt;, so if I continued
with the instructions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;adb forward tcp:4444 localabstract:/adb-hub; adb connect localhost:4444&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Doing&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;adb devices&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Only showed my wearable as &lt;code&gt;offline&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;List of devices attached

dcfbbafd	device
localhost:4444	offline&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/blog/img/rage-offline.jpg&quot; alt=&quot;Why so evil?&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have searched for an answer in a lot of pages, including &lt;a href=&quot;http://stackoverflow.com/questions/25938998/debugging-on-moto-360&quot;&gt;Stackoverflow&lt;/a&gt; where
I tried very unlikely answers like in &lt;a href=&quot;http://stackoverflow.com/questions/25938998/debugging-on-moto-360&quot;&gt;this page&lt;/a&gt;: execute both commands separately instead
of doing them in the same line. I thought that maybe there was a timing issue and that the fact of separating both commands would give the toolkit a chance,
but no, wasn&amp;#8217;t that easy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the end, I was totally convinced that the problem was because I had previously associated my handheld with an emulator. I was convinced of it because even if I had now associated it with a real device (the Moto 360), in the Android Wear companion app, the device was recognized as an &quot;emulator&quot;&amp;#8230; mmm&amp;#8230; So I tried uninstalling the Android Wear app, clear its cache, but no matter what I did, after reinstalling, the settings were kept, and the Moto recognized as an emulator. So sad&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_solution&quot;&gt;The solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So you were looking at a solution, and here it is. Basically, the problem is that the Android companion app doesn&amp;#8217;t store its settings under its cache. They are stored in the &lt;code&gt;Google Play Services&lt;/code&gt; space, so here is the procedure that worked for me, and I sincerely hope it will do for you. On your handheld:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;open the applications settings, search for the &lt;code&gt;Android Wear&lt;/code&gt; application, then &lt;strong&gt;force stop it&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;clear its &lt;strong&gt;data and cache&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;now search for &lt;code&gt;Google Play Services&lt;/code&gt; (depending on your language settings, it can appear with a different name, on m y device it is &quot;Services Google Play&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;click on &lt;code&gt;Manage space&lt;/code&gt;. You will see that there&amp;#8217;s a section for connected devices. I tried to clear data here, but it didn&amp;#8217;t help, so you have to click on &lt;strong&gt;delete all data&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reboot your phone&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reboot your Moto 360&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am unsure that the two last steps are really necessary, but I did it because I wanted to make sure that force stopping and clearing data did not introduce some weird behavior after that. When you reopen the Android Wear companion app, it should now be as if it was the first time you opened it and ask you to associate it with your watch. Do it, and now, you should be able to follow the normal procedure described in the Android documentation and&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/blog/img/yes-baby.jpg&quot; alt=&quot;yes baby&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Success, now you can debug your application on a real device (which includes deploying it&amp;#8230;).&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;fr&quot;&gt;&lt;p&gt;Hey, finally got it working! I need to blog about how I arrived the insane emulator issue... &lt;a href=&quot;https://twitter.com/hashtag/groovylang?src=hash&quot;&gt;#groovylang&lt;/a&gt; &lt;a href=&quot;http://t.co/XINccF3V7k&quot;&gt;pic.twitter.com/XINccF3V7k&lt;/a&gt;&lt;/p&gt;&amp;mdash; Cédric Champeau (@CedricChampeau) &lt;a href=&quot;https://twitter.com/CedricChampeau/status/523934124898521090&quot;&gt;19 Octobre 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Tip of the day: reversed git bisect</title>
      <link>http://melix.github.io/blog/2014/07/bisecting-groovy.html</link>
      <pubDate>Wed, 23 Jul 2014 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">2014/07/bisecting-groovy.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I had an interesting use case for &lt;code&gt;git bisect&lt;/code&gt; today and as my blog also consistutes a good archive for things I don&amp;#8217;t
want to loose, let&amp;#8217;s take advantage of this to share the trick with you!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Normally, &lt;code&gt;git bisect&lt;/code&gt; is used to find what commit introduced a regression in the codebase. For example, if you know
that current &lt;code&gt;HEAD&lt;/code&gt; is buggy but that at least, RELEASE_1_0 was good, then you can write:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;git bisect start             &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
git bisect bad               &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
git bisect good RELEASE_1_0  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;start bisecting&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;tells that &lt;code&gt;HEAD&lt;/code&gt; contains the regression&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;tells that &lt;code&gt;RELEASE_1_0&lt;/code&gt; is a tag corresponding to a version known not to have the bug&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Git will checkout a revision that you can test, and you issue a list of &lt;code&gt;git bisect good&lt;/code&gt; or &lt;code&gt;git bisect bad&lt;/code&gt; commands
until it determines what commit introduced the regression.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a &lt;strong&gt;very&lt;/strong&gt; practical way to find a regression. In Groovy, I&amp;#8217;ve used this more than once, it&amp;#8217;s very useful.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_reversing_the_logic&quot;&gt;Reversing the logic&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But today, I wanted to &lt;em&gt;reverse the logic&lt;/em&gt;. Actually, we had a &lt;a href=&quot;https://jira.codehaus.org/browse/GROOVY-6463&quot;&gt;bug report&lt;/a&gt;
and we found out that the bug was already fixed, but we didn&amp;#8217;t know in which version it was fixed. So actually, I didn&amp;#8217;t
want to find a regression, but a fix commit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The idea to do this is to reverse the meaning of &lt;code&gt;bad&lt;/code&gt; and &lt;code&gt;good&lt;/code&gt; in &lt;code&gt;bisect&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bad&lt;/code&gt; becomes &quot;doesn&amp;#8217;t produce a compile error&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;good&lt;/code&gt; becomes &quot;produces a compile error&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And since the range of revisions to test was pretty big (we know that the error was reported on Groovy 2.2.1, but master
is 2.4.0), then I also took advantage of the &lt;code&gt;git bisect run&lt;/code&gt; command, which automatically continues bisecting based on
a command line return status code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So basically, here&amp;#8217;s what I wrote:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;git bisect start                &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
git bisect bad master           &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
git bisect good GROOVY_2_2_1    &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
git bisect run ./bisect.sh      &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;start bisecting&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;master is known to have the fix, so we say &lt;strong&gt;bad&lt;/strong&gt; is master&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;GROOVY_2_2_1 is known to have the bug, so we say &lt;strong&gt;good&lt;/strong&gt; is GROOVY_2_2_1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;start automatic bisecting thanks to the ./bisect.sh script&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And what does &lt;em&gt;bisect.sh&lt;/em&gt; consist of? Here you go:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;bisect.sh&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;#!/bin/bash
export GROOVY_HOME=/tmp/testversion                                                                     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
./gradlew clean -x javadoc -x groovydoc -x javadocAll -x groovydocAll -PskipIndy=true installGroovy     &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
/tmp/testversion/bin/groovy bisect.groovy || exit 0                                                     &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
exit 1                                                                                                  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;tells where the local build version of Groovy will be installed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;builds Groovy and installs it locally&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;executes the test script and if the test fails, return a success exit code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;return a failure exit code&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The trick is to &lt;strong&gt;reverse the exit codes&lt;/strong&gt; in the script too: if the script compiles, then it means that the bug was fixed.
Since we reverse the logic, we then need the script to return a bad exit code! In case the script fails, we will return
a success (0) error code, because it means that the revision doesn&amp;#8217;t have the fix. Easy, but needs some mental contorsion :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will note that this script uses &lt;code&gt;GROOVY_HOME&lt;/code&gt; and a local installation path. You can configure it using the &lt;code&gt;$HOME/.gradle/gradle.properties&lt;/code&gt; file,
and adding the following line in it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;gradle.properties&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;groovy_installPath=/tmp/testversion&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eventually, here is the groovy script which served as a test case (almost copied directly from the JIRA issue):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;bisect.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;abstract  class Base&amp;lt;A&amp;gt; {
    abstract  void foo(A[] a)
}

class X {}

class Inheritor extends Base&amp;lt;X&amp;gt;{
    @Override
    void foo(X[] a) {}
//Groovyc: Can&apos;t have an abstract method in a non-abstract class.
//The class &apos;B&apos; must be declared abstract
//or the method &apos;void foo([Ljava.lang.Object;)&apos; must be implemented.
}

Inheritor&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that each revision took around ~1 min 30s to test, even skipping the javadoc/groovydoc and indy versions of Groovy,
so you can imagine what benefit you have here in using automatic bisecting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the end, after around 20 minutes of automatic processing, I received this nice message:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;74d991f9f8c39d2730a054431bf28e6516e61735 is the first bad commit
commit 74d991f9f8c39d2730a054431bf28e6516e61735
Author: Cedric Champeau &amp;lt;cedric.champeau@gmail.com&amp;gt;
Date:   Sun Apr 27 18:06:24 2014 +0200

    GROOVY-6722: Compiler doesn&apos;t handle generic array covariant

:040000 040000 b61b92399ac86246c157f948b3232bf5ab0cf04f 5d0c56413a621c7693e7985aff0e4c84eb08889f M	src
bisect run success&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What? &quot;bad commit&quot;? Yes, remember that the logic is reversed, so &quot;bad&quot; means actually &quot;fixed it&quot;. So it says that the
first commit which &lt;strong&gt;fixed&lt;/strong&gt; the bug was actually &lt;code&gt;74d991f&lt;/code&gt;. And here we go, issue closed ;) One improvement I can see
is to use a local clone of my repository instead of working directly in the same repository, so that I can continue
working on my copy while bisecting is in progress.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>The new Groovy website</title>
      <link>http://melix.github.io/blog/2014/07/new-groovy-website.html</link>
      <pubDate>Fri, 18 Jul 2014 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">2014/07/new-groovy-website.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last week, we revealed the beta of a &lt;a href=&quot;http://beta.groovy-lang.org&quot;&gt;brand new website for the Groovy language&lt;/a&gt;. This
new website is &lt;a href=&quot;https://github.com/groovy/groovy-website&quot;&gt;open sourced&lt;/a&gt; and already received a few contributions.
In order to make it even easier and as it a fully statically generated site that makes use of Groovy
I wanted to give more technical details on the toolchain and how it is generated.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a_static_website&quot;&gt;A static website&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the first questions which arised was: &lt;em&gt;why not use Grails/Spring Boot/Ratpack?&lt;/em&gt; In fact, the
new Groovy website is fully statically generated. It offers multiple advantages:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;hosting is much easier, as it only consists of static pages and assets&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;maintenance is simplified, no database to backup for example&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;everything is self contained, pages and data, into a &lt;a href=&quot;https://github.com/groovy/groovy-website&quot;&gt;single repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;no need for authentication&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;all content is public&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last but not least, we didn&amp;#8217;t have any requirement for storing anything in a database, or that would
require dynamic generation. Pull requests are enough so far. Eventually, we&amp;#8217;re thinking about a
blog, but even that can be statically generated even if you want to allow users to comment on articles
(this blog is a perfect example). So in short, this decision was motivated by one mantra:
&lt;em&gt;the right tool for the right job&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The documentation, that you can find on &lt;a href=&quot;http://beta.groovy-lang.org/documentation.html&quot;&gt;this page&lt;/a&gt;, had
already started migrating from the aging wiki to . It is generated independently of the
website and integrated into it using iframes (we&amp;#8217;re thinking about source integration though).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_structure_of_the_project&quot;&gt;Structure of the project&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_generator_and_site&quot;&gt;Generator and site&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/groovy/groovy-website&quot;&gt;project&lt;/a&gt; is built using &lt;a href=&quot;http://www.gradle.org&quot;&gt;Gradle 2&lt;/a&gt; and consists of 2 subprojects:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the &lt;a href=&quot;https://github.com/groovy/groovy-website/tree/master/generator&quot;&gt;generator&lt;/a&gt; project contains, as the name says,
the static generator. It makes use of a &lt;a href=&quot;#template-engine&quot;&gt;template engine&lt;/a&gt; and provides the classes used in the model
of the templates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the &lt;a href=&quot;https://github.com/groovy/groovy-website/tree/master/site&quot;&gt;site&lt;/a&gt; project contains the templates and data. If you&amp;#8217;re
looking into contributing contents, this is likely the place to look at.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Building and testing the site is easy:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;git clone https://github.com/groovy/groovy-website.git          &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
cd groovy-website
./gradlew generate                                              &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;clones the repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;generates the website from templates&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The output will be visible in &lt;code&gt;&amp;lt;project directory&amp;gt;/site/build/site&lt;/code&gt;. There&amp;#8217;s also a &lt;code&gt;checkDeadlinks&lt;/code&gt; tasks that we will
use once we get out of the beta phase to ensure that the generated pages do not contain any dead link.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Internally, we use our &lt;a href=&quot;http://ci.groovy-lang.org/viewType.html?buildTypeId=Groovy_Website&amp;amp;guest=1&quot;&gt;CI server&lt;/a&gt; to deploy
changes to the &lt;code&gt;master&lt;/code&gt; branch live. So any commit which is pushed onto the master branch is automatically published
(in general, takes less than 2 minutes).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_adding_contents&quot;&gt;Adding contents&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even if the site is statically generated, we still have data. In this project, there&amp;#8217;s an important file, named
&lt;a href=&quot;https://github.com/groovy/groovy-website/blob/master/site/src/site/sitemap.groovy&quot;&gt;sitemap.groovy&lt;/a&gt; which handles a lot
of the contents of the website. It is our &quot;low cost&quot; database and as you can see, it&amp;#8217;s a DSL describing the contents
of the website.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, you can see the &lt;code&gt;menu&lt;/code&gt; section which looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;menu {
    group(&apos;Groovy&apos;) {
        item &apos;Learn&apos;,                       &apos;learn.html&apos;
        item &apos;Documentation&apos;,               &apos;documentation.html&apos;
        item &apos;Download&apos;,                    &apos;download.html&apos;
        item &apos;Community&apos;,                   &apos;community.html&apos;
        item &apos;Ecosystem&apos;,                   &apos;ecosystem.html&apos;
    }

    group(&apos;About&apos;) {
        item &apos;Contributing&apos;,                &apos;contribute.html&apos;
        item &apos;Source code&apos;,                 &apos;https://github.com/groovy/groovy-core&apos;
        item &apos;Books&apos;,                       &apos;learn.html#books&apos;
        item &apos;Sponsors&apos;,                    &apos;sponsors.html&apos;
        item &apos;FAQ&apos;,                         &apos;faq.html&apos;
        item &apos;Search&apos;,                      &apos;search.html&apos;
    }

    // ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is a purely declarative description of the site menus. Actually, the &quot;Groups&quot; are used in the footer of the page,
while the main &lt;code&gt;Groovy&lt;/code&gt; group is used to generate the top navigation bar. Using a simple descriptive DSL is very interesting,
because it decouples templates from the contents of the menu. We make sure that those templates do not contain any element
which is hardcoded and reduce the risks of forgetting to update the footer, for example, if a section is added.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same file is used to describe the list of downloads:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;downloads {
    // ...
    distribution(&apos;Groovy 2.3&apos;) {
        description {
            yield &apos;Groovy 2.3 is our latest official &apos;
            a(href: &apos;versioning.html&apos;, &apos;version&apos;)
            yield &apos; of Groovy.&apos;
        }

        version(&apos;2.3.4&apos;) {
            stable true
            releaseNotes &apos;https://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=10242&amp;amp;version=20432&apos;
            windowsInstaller &apos;http://dist.codehaus.org/groovy/distributions/installers/windows/nsis/groovy-2.3.4-installer.exe&apos;
        }
    }
    // ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or the books which are listed on the &lt;a href=&quot;http://beta.groovy-lang.org/learn.html&quot;&gt;learn page&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;books {
    book(&apos;Groovy in Action, 2nd edition&apos;) {
        authors &quot;Dierk König, Guillaume Laforge, Paul King, Cédric Champeau, Hamlet D&apos;Arcy, Erik Pragt, and Jon Skeet&quot;
        cover &apos;img/books/regina.png&apos;
        url &apos;http://www.manning.com/koenig2/&apos;
        description &apos;The undisputed definitive reference on the Groovy programming language, authored by core members of the development team.&apos;
    }
    // ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same is done for all contents that need regular updates: user groups, events, projects of the ecosystem, &amp;#8230; I think
this DSL provides a very nice way to add contents to the website without caring about where it has to be done. You can
really think of it as a small database, but making use of a Groovy DSL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, this file also declares the &lt;a href=&quot;https://github.com/groovy/groovy-website/blob/03e3806cf26af6b13d99e6ee7473687e3f36fedd/site/src/site/sitemap.groovy#L62-L74&quot;&gt;mapping between pages in the documentation section&lt;/a&gt;
and &lt;a href=&quot;http://beta.groovy-lang.org/documentation.html&quot;&gt;the documentation page&lt;/a&gt;. Last but not least, it lists the individual
pages that the website contain. Those pages make use of the &lt;a href=&quot;http://beta.groovy-lang.org/docs/latest/html/documentation/markup-template-engine.html&quot;&gt;markup template engine&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_eat_your_own_dog_food&quot;&gt;Eat your own dog food&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Groovy 2.3, we introduced a new &lt;a href=&quot;http://beta.groovy-lang.org/docs/latest/html/documentation/markup-template-engine.html&quot;&gt;markup template engine&lt;/a&gt;. We decided that the new web site was an excellent showcase of
this template engine, and a real life use case. This template engine has several remarkable features, like static compilation
of templates (even if the model is dynamic), layouts and of course a human readable builder like syntax:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;html {
   head {
    title &apos;Groovy markup template engine in action!&apos;
   }
   body {
    ul {
        features.each { f-&amp;gt; li(f.name) }
    }
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It has already been integrated into &lt;a href=&quot;https://spring.io/blog/2014/05/28/using-the-innovative-groovy-template-engine-in-spring-boot&quot;&gt;Spring Boot&lt;/a&gt;
and &lt;a href=&quot;http://www.ratpack.io/&quot;&gt;Ratpack&lt;/a&gt; will use it in the next version (to be released on August 1st). A hint about its performance can be found &lt;a href=&quot;https://github.com/ratpack/ratpack/pull/370&quot;&gt;here&lt;/a&gt;.
If you are interested in details about how it works, you can find the documentation &lt;a href=&quot;http://beta.groovy-lang.org/docs/latest/html/documentation/markup-template-engine.html&quot;&gt;here&lt;/a&gt;
and you can read my &lt;a href=&quot;http://melix.github.io/blog/2014/02/markuptemplateengine.html&quot;&gt;blog posts&lt;/a&gt; about it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The website subproject is therefore organized accordingly. Inside the &lt;a href=&quot;https://github.com/groovy/groovy-website/tree/master/site/src/site&quot;&gt;main source tree&lt;/a&gt;, you&amp;#8217;ll find the following directories:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;assets: contains static assets, like Javascript, CSS, images, &amp;#8230;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;html: contains pure HTML files which are easier to embed as is than using a markup syntax&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;includes: contains elements of code which are shared among multiple templates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;layouts: contains template layouts, as defined in the &lt;a href=&quot;http://beta.groovy-lang.org/docs/latest/html/documentation/markup-template-engine.html#_layouts&quot;&gt;documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pages: contains the main pages of the website&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general, consider &lt;code&gt;pages&lt;/code&gt; as the entry point. A page generally makes use of one layout. As an example, let&amp;#8217;s see how
the &lt;a href=&quot;http://beta.groovy-lang.org/ecosystem.html&quot;&gt;Ecosystem&lt;/a&gt; page is generated. The source file consists of this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;ecosystem.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;layout &apos;layouts/main.groovy&apos;, true,                                             &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    pageTitle: &apos;The Groovy programming language - Ecosystem&apos;,                   &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    mainContent: contents {                                                     &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      div(id: &apos;content&apos;, class: &apos;page-1&apos;) {
        section(class: &apos;row&apos;) {
          div(class: &apos;row-fluid&apos;) {
            // ... snip side menu ...
            div(class: &apos;col-lg-8 col-lg-pull-0&apos;) {
              include template: &apos;includes/contribute-button.groovy&apos;             &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
              h1 {
                i(class: &apos;fa fa-leaf&apos;) {}
                yield &apos; Ecosystem&apos;
              }
              p {
                yield &apos;&apos;&apos;
                    Beside the language and its API, Groovy gave birth   ...
                    on various themes such as web frameworks, desktop    ...
                    In this section, we will highlight a few of the most ...
                    which leverage Groovy at their core.
              &apos;&apos;&apos;
              }
              hr(class: &apos;divider&apos;)

              ecosys.eachWithIndex { e, index -&amp;gt;                                &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
                def (name, item) = [e.key, e.value]
                article {
                  a(name: &quot;${name}&quot;) {}
                  div(class:&quot;content-heading clearfix media&quot;) {
                    div {
                      if (item.logo) {
                        img class: &quot;pull-${(index % 2 == 0) ? &apos;left&apos; : &apos;right&apos;}&quot;,
                          src: item.logo, alt: name, hspace: &apos;20px&apos;
                      } else {
                        h2(name)
                      }
                      p(item.description)
                    }
                    a(href: item.url, target:&apos;_blank&apos;, &quot;Learn more...&quot;)
                  }
                }
                hr(class: &apos;divider&apos;)
              }
              // ...
            }
          }
        }
      }
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;make use of the &lt;code&gt;main&lt;/code&gt; layout&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;the layout requires a &lt;code&gt;pageTitle&lt;/code&gt; variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;as well as a &lt;code&gt;mainContent&lt;/code&gt; section corresponding to the main page contents&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;example of use of an &lt;code&gt;include&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;iterates over the &lt;code&gt;ecosys&lt;/code&gt; variable which contains the list of ecosystem projects as found in the sitemap&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, this template format has the advantage of taking care of generating markup for you. You won&amp;#8217;t hit your
head again on the wall to find an unclosed tag. Everything is embedded, readable and concise.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_lessons_learnt&quot;&gt;Lessons learnt&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using the &lt;a href=&quot;http://beta.groovy-lang.org/docs/latest/html/documentation/markup-template-engine.html&quot;&gt;markup template engine&lt;/a&gt; for this project was interesting, because it was probably the first &quot;real life&quot; project
to use it intensively. And as such, we discovered usability issues, but also bugs. Hopefully, none of those bugs or
usability features were critical, and everything could be worked around, but expect some fixes in Groovy 2.3.5. It is
also the reason why the project initially used &lt;a href=&quot;http://www.gradle.org&quot;&gt;Gradle 2&lt;/a&gt;: it comes with Groovy 2.3.2 which embeds the &lt;a href=&quot;http://beta.groovy-lang.org/docs/latest/html/documentation/markup-template-engine.html&quot;&gt;markup template engine&lt;/a&gt;,
so it was possible to use it &lt;strong&gt;without&lt;/strong&gt; organizing the project into separate modules like we have. In fact, the early
versions of the site didn&amp;#8217;t use subprojects. It&amp;#8217;s only when we wanted to leverage improvements from Groovy 2.3.4 that
we had to &lt;a href=&quot;https://github.com/groovy/groovy-website/commit/e922701f747dbb78a7e695796c60d2b783f7e7ee&quot;&gt;switch to that architecture&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a_team_work&quot;&gt;A team work&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the end, I can&amp;#8217;t finish this blog post without mentionning the team work it implied. In particular:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/oodamien&quot;&gt;Damien Vitrac&lt;/a&gt; designed the website and produced HTML sketches. If you think the new site
looks good, thank this guy!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/glaforge&quot;&gt;Guillaume Laforge&lt;/a&gt; designed the site architecture, wrote contents, tweaked the CSS, that is to
say produced almost all contents. He spent countless hours fixing responsiveness issues and digging into front-end dev.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/CedricChampeau&quot;&gt;I streamlined&lt;/a&gt; the process by setting up the Gradle project, designing the sitemap DSL,
the integration of the &lt;a href=&quot;http://beta.groovy-lang.org/docs/latest/html/documentation/markup-template-engine.html&quot;&gt;markup template engine&lt;/a&gt;, CI integration, &amp;#8230; that is to say pretty much all the &quot;backend&quot; stuff.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;You&lt;/strong&gt;, as a community, provided awesome &lt;a href=&quot;https://github.com/groovy/groovy-website/pulls?direction=desc&amp;amp;page=1&amp;amp;sort=created&amp;amp;state=closed&quot;&gt;pull requests&lt;/a&gt; within hours. Keep them coming, we love it!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each of us have different skills. Guillaume is far better than I am in any kind of web design, styling issues, etc for example, so in the
end, I think the combination works quite good and that the site as it is now is already pretty usable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let us know what you think, and don&amp;#8217;t forget that you can contribute, it&amp;#8217;s easy!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
