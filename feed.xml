<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CÃ©dric Champeau's blog</title>
    <link>http://melix.github.io/blog/</link>
    <atom:link href="http://melix.github.io/blog//feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Wed, 12 Sep 2018 12:41:50 +0200</pubDate>
    <lastBuildDate>Wed, 12 Sep 2018 12:41:50 +0200</lastBuildDate>

    <item>
      <title>Gradle myth busting: lifecycle</title>
      <link>http://melix.github.io/blog/2018/09/gradle-lifecycle.html</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">2018/09/gradle-lifecycle.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_build_lifecycle&quot;&gt;The build lifecycle&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s a very common misconception I read from Maven users about Gradle: that there&amp;#8217;s no default lifecycle. Not only this is &lt;a href=&quot;https://scans.gradle.com/s/alokg5xymahwa/timeline?task=345te4gku5gw4&quot; target=&quot;_blank&quot;&gt;wrong&lt;/a&gt;, but actually the Gradle lifecycle is significanly richer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s explain in a few words what the lifecycle is in Maven. Detailed explanations can be found &lt;a href=&quot;https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html&quot; target=&quot;&lt;em&gt;blank&quot;&gt;here&lt;/a&gt;, but in a nutshell, the idea is that _any&lt;/em&gt; build will always consist in a sequence of phases, and that each phase is built on top of the previous one. This has the advantage of being simple to explain: to deploy an application, you first need compile it, run the tests, package it, perform validation (checkstyle, &amp;#8230;) and deploy. Let me ignore &lt;em&gt;install&lt;/em&gt; which is an artifact of how Maven works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maven plugins attach themselves to those lifecycle phases, and define goals on different phases. For example, a code generator would attach itself to the &lt;code&gt;generate-sources&lt;/code&gt; phase, and define a &lt;em&gt;goal&lt;/em&gt; that runs at this phase. Fun begins when you have dependencies between the goals, and ordering matters&amp;#8230; Anyway, the general idea is that if you want to get the outcome of, say, packaging, you have to execute all previous phases and consequently all goals that are defined on those phases. The other consequence is that the Maven lifecycle is biased towards the Java model, and more specifically, building Java libraries. It&amp;#8217;s even clearer when you think about the term &lt;code&gt;deploy&lt;/code&gt;, which doesn&amp;#8217;t mean &quot;deploy this application on production&quot;, but &quot;push this jar on the external Maven repository&quot;. Similarly &quot;install&quot; doesn&amp;#8217;t mean &quot;install this application on my laptop&quot;, but &quot;copy this library into my local .m2 repository&quot;. This, I would argue, is rather counter-intuitive&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gradle, on the other hand, is a generic build tool. It&amp;#8217;s aimed at the Java ecosystem, but also the native one, the Android ecosystem, Python, Go, &amp;#8230; It doesn&amp;#8217;t matter. All of those ecosystems have an underlying model, and the way you build applications or libraries in each of those ecosystems is different. Gradle offers the APIs to &lt;em&gt;model the builds&lt;/em&gt; of each ecosystem. This flexibility is often what troubles Maven users, and makes them think there&amp;#8217;s no lifecycle, but it&amp;#8217;s not true.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_goals_vs_tasks&quot;&gt;Goals vs tasks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To understand why, we need to explain that Gradle model is not &lt;em&gt;phase&lt;/em&gt; based, but &lt;em&gt;task&lt;/em&gt; based. It&amp;#8217;s a bit like what Ant did, but the similarity stops there. While Ant didn&amp;#8217;t define &lt;em&gt;any&lt;/em&gt; convention, &lt;em&gt;any&lt;/em&gt; lifecycle, and everything was different from one build to the other, this is not true with Gradle. By default, if you apply this &quot;Java library&quot; plugin, you&amp;#8217;ll get &lt;em&gt;all the conventions you find with Maven&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;plugins {
   id &apos;java-library&apos;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the minimal build file you need to build, test and package a Java library with Gradle, with the same conventions as Maven &lt;code&gt;src/main/java&lt;/code&gt;, &amp;#8230; By applying this plugin, Gradle internally applies a sequence of plugins, which, in turn, would define new tasks, and more specifically for the topic of this blog post, &lt;em&gt;lifecycle tasks&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Gradle, a task is responsible for executing a unit of work. For example, &quot;compile this source set&quot;. A task has inputs (the source files) and outputs (the class files). But a task also has &lt;em&gt;dependencies&lt;/em&gt;. In particular, dependencies on other tasks. Gradle makes sure that a task graph is a DAG (direct, acyclic graph). This means that if you run &lt;code&gt;compile&lt;/code&gt; on the command-line, what Gradle does is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;compute the task dependencies of &lt;code&gt;compile&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;execute the tasks &lt;em&gt;in order&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Task dependencies can be explicit (say, &lt;code&gt;compile.dependsOn(compileJava)&lt;/code&gt;), or implicit (because you add a source set as an input, &lt;strong&gt;and&lt;/strong&gt; that this source set is generated by another task, then we know we need to run the code generation &lt;em&gt;for this source set&lt;/em&gt; before). This model is nice because it&amp;#8217;s significantly more fine grained than the phase one. When you execute a task, Gradle will always perform the minimal amount of work required to get the output of this task. Let&amp;#8217;s illustrate with an example: say you want to run the unit tests of your library. You would run the &lt;code&gt;test&lt;/code&gt; task with Gradle. Gradle would then determine that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;it needs to compile the sources of the library (&lt;code&gt;compileJava&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;but the sources includes a generated source set, so it needs to execute it (&lt;code&gt;generateSources&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it would also find that the &quot;resources&quot; are an input of the test classpath, so execute the &lt;code&gt;processResources&lt;/code&gt; task&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;etc&amp;#8230;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But, in the end, it would &lt;em&gt;not&lt;/em&gt; generate the jar file. Because Gradle knows that to run the tests, there&amp;#8217;s no need to get the jar: we can build a classpath that consists of the generated classes and the resources directories. It&amp;#8217;s actually very easy to figure out what the task dependencies are by running with &lt;code&gt;--dry-run&lt;/code&gt;, or using a &lt;a href=&quot;https://scans.gradle.com/s/mfihmuxqj2b2u/dependencies?focusedDependency=WzE3LDEsNTgsWzE3LDEsWzIzNiw1OF1dXQ&amp;amp;toggled=W1s4XSxbMTddLFsxNywxXSxbMTcsMSxbMjM2XV1d&quot; target=&quot;_blank&quot;&gt;build scan&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_so_will_you_tell_me_what_the_lifecycle_of_gradle_is_then&quot;&gt;So, will you tell me what the lifecycle of Gradle is then?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the trick. With Gradle, everything boils down to tasks, which are a bit like functions, with inputs and outputs. But there are special kinds of tasks, that we call &quot;lifecycle tasks&quot;, which are &lt;em&gt;binding other tasks together&lt;/em&gt;. They, effectively, produce no output individually. Their only role is to have dependencies on other tasks, so that we have nice shortcuts to produce our outputs. For example, the &lt;code&gt;check&lt;/code&gt; task is a lifecycle task which has dependencies on the &lt;code&gt;test&lt;/code&gt; task, but also the &lt;code&gt;checkstyle&lt;/code&gt; task, etc&amp;#8230; Plugins are free to add dependencies to the &lt;code&gt;check&lt;/code&gt; task, and &lt;em&gt;enrich&lt;/em&gt; the check lifecycle this way. But even better, by defining dependencies between tasks like that, and clearly defining the inputs and outputs of each task, we make it possible to get &lt;em&gt;correct&lt;/em&gt; incremental builds, as well as &lt;em&gt;caching&lt;/em&gt; (and no, this &lt;a href=&quot;https://docs.gradle.org/current/userguide/build_cache.html&quot; target=&quot;_blank&quot;&gt;has nothing to do with &lt;code&gt;~/.m2&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The good news is that because lifecycle tasks are just regular tasks, it means they can also depend on each other, and you can build your own lifecycle tasks. It becomes very easy to model your build production pipeline. So here is a simple correspondance matrix for Maven users, for the Java library plugin:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:100%; &quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Lifecycle correspondance matrix&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width:33%;&quot;&gt;
&lt;col style=&quot;width:33%;&quot;&gt;
&lt;col style=&quot;width:33%;&quot;&gt; 
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Maven&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Gradle&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;clean&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;clean&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Removes the outputs of tasks&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;compile&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;classes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Generates the classes from source files&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;test&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;test&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Executes unit tests&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;package&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;assemble&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Creates a jar&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;verify&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;check&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Runs all tests, integration tests, quality checks, &amp;#8230;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;install&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;publishToMavenLocal&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Gradle doesn&amp;#8217;t need a local repository, but should you need Maven interoperability, you can add the &lt;code&gt;maven-publish&lt;/code&gt; plugin to add this task&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;deploy&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;publishToMavenRepository&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;This tasks is &lt;em&gt;not&lt;/em&gt; available by default, as it depends on which type of repository you deploy to. In general you just apply the &lt;code&gt;maven-publish&lt;/code&gt; plugin to add this task&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But remember: in Gradle, tasks depend on each other. So it means that if you run a lifecycle task, &lt;em&gt;only the tasks required for that specific target are going to be executed&lt;/em&gt;. Nothing more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_see_us_at_devoxx_belgium&quot;&gt;See us at Devoxx Belgium!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to discover more of the differences between Gradle and Maven, come see my colleague Louis Jacomet and I during Devoxx Belgium, we&amp;#8217;re giving a &lt;a href=&quot;https://dvbe18.confinabox.com/talk/UAH-5130/Switching_to_Gradle:_maturity,_performance,_and_pleasure!&quot; target=&quot;_blank&quot;&gt;deep dive into Gradle&lt;/a&gt; where we&amp;#8217;re going to cover what is explained here, and much more!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Assistants vocaux et robotisation: mon point de vue</title>
      <link>http://melix.github.io/blog/2018/07/robots-vs-human.html</link>
      <pubDate>Tue, 3 Jul 2018 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">2018/07/robots-vs-human.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce billet essaie de rÃ©sumer une conversation que j&amp;#8217;ai eu avec mon frÃ¨re, concernant les craintes autour des assistants vocaux, et, plus gÃ©nÃ©ralement, la robotisation. Je partage une grande partie de &lt;a href=&quot;https://www.blogdumoderateur.com/role-controverse-assistants-vocaux/&quot;&gt;son point de vue&lt;/a&gt;, mais j&amp;#8217;ai aussi de larges diffÃ©rences que je voulais rÃ©sumer ici. C&amp;#8217;est parti !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;__ok_google_cr_e_un_malaise&quot; class=&quot;sect0&quot;&gt;&quot;Ok Google, crÃ©e un malaise&quot;&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le week-end dernier, Ã  l&amp;#8217;occasion d&amp;#8217;un barbecue en famille Ã  la maison, ma moitiÃ© a, au dÃ©tour d&amp;#8217;une conversation, lancÃ© cette phrase par pur rÃ©flexe:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Ok Google, &amp;lt;question anodine&amp;gt;&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LÃ , mon frÃ¨re, Guillaume, a fait un malaise. Etendu sur le sol, pris de spasmes incontrÃ´lables, en position foetale, il baffouillait des phrases pour la plupart inintelligibles, mais, par moments, j&amp;#8217;arrivais Ã  comprendre des bribes comme &quot;pas eux&quot;, &quot;GDPR&quot;, ou autres &quot;Saint Qwant venez-vous en aide&quot;. AprÃ¨s quelques minutes, l&amp;#8217;intervention d&amp;#8217;un seau d&amp;#8217;eau et rongÃ© par la honte de se montrer ainsi devant junior, Guillaume repris ses esprits, et commenÃ§a une discussion trop courte parce qu&amp;#8217;interrompue par la nÃ©cessitÃ© autrement plus primaire de faire griller quelques saucisses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Au final, la question se rÃ©sume Ã  celle-ci: pourquoi ? De mon cÃ´tÃ©, je suis assez ouvert sur l&amp;#8217;utilisation des assistants, et je dois dire que c&amp;#8217;est quelque chose que j&amp;#8217;attendais vÃ©ritablement depuis des annÃ©es. De lonnngggues annÃ©es. Guillaume n&amp;#8217;avait probablement rien notÃ© jusqu&amp;#8217;ici parce que mon assistant prenait la forme d&amp;#8217;une enceinte bluetooth classique, alors qu&amp;#8217;il s&amp;#8217;agit en fait une enceinte Sony intÃ©grant la technologie de Google. J&amp;#8217;avais choisi ce modÃ¨le principalement parce qu&amp;#8217;une des utilisations que je fais de cet assistant, probablement la plus frÃ©quente, est de lui demander de me diffuser de la musique (via Deezer), ou la radio. La domotique, c&amp;#8217;est un peu un rÃªve de gosse pour moi, j&amp;#8217;adore tout piloter, par une appli, ou par la voix. Donc parmi les autres utilisations que j&amp;#8217;en fais, il y a:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;contrÃ´ler mes lumiÃ¨res, mon thermostat&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;contrÃ´ler ma box domotique (et donc les appareils non directement &quot;connectÃ©s&quot;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;demander des informations (mÃ©tÃ©o, Ã  quelle heure est le match de la France, &amp;#8230;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enclencher un minuteur pour la cuisine, ajouter des rappels&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le problÃ¨me, qui choque Guillaume, est que pour avoir accÃ¨s Ã  toutes ces fonctions, je partage Ã©normÃ©ment de donnÃ©es avec El Diablo (Google). Oui, mais j&amp;#8217;en suis conscient. Et, par ailleurs, mon compte est configurÃ© avec une extrÃªme prÃ©caution. Notamment, j&amp;#8217;ai complÃ¨tement dÃ©sactivÃ© la personnalisation des annonces. Je garde nÃ©anmoins certaines fonctionnalitÃ©s comme le traÃ§age de ma position gÃ©ographique (qui, par une occasion, m&amp;#8217;a permis de dÃ©montrer Ã  des amis qu&amp;#8217;on Ã©tait bien allÃ© les voir au mois d&amp;#8217;Octobre :)). J&amp;#8217;ai plus de mal, en revanche, sur l&amp;#8217;historique des recherches. Mais le noeud du problÃ¨me, c&amp;#8217;est qui dÃ©tient les donnÃ©es, ce qu&amp;#8217;ils en font et en particulier avec qui ils les partagent. Pour ma part, la seule raison pour laquelle j&amp;#8217;utilise les services de Google est qu&amp;#8217;ils me permettent &lt;em&gt;techniquement&lt;/em&gt; de faire ce que je veux. Si, demain, j&amp;#8217;ai la possibilitÃ© d&amp;#8217;avoir une box locale qui m&amp;#8217;offre les mÃªmes capacitÃ©s, y compris lorsqu&amp;#8217;invoquÃ©e via IFTTT, je signe Ã  quatre mains. En attendant que celÃ  existe, et j&amp;#8217;espÃ¨re sincÃ¨rement que celÃ  arrivera au plus vite, je fais des compromis, et il faut Ãªtre conscient de ce que l&amp;#8217;on a a la maison.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LÃ  oÃ¹ je suis moins d&amp;#8217;accord, c&amp;#8217;est la diabolisation Ã  l&amp;#8217;extrÃªme des assistants. Je reviendrais plus tard sur quelques raisons, mais en particulier un argument que j&amp;#8217;entends souvent, c&amp;#8217;est &quot;oui mais lÃ  tu as un micro qui Ã©coute tout le temps chez toi et qui envoie tes donnÃ©es Ã  Google&quot;. Ah, nous y voilÃ . Quel est le problÃ¨me ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Ã§a Ã©coute tout le temps ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ã§a envoie tes donnÃ©es ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ã§a les envoie Ã  Google ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;qui traite des infos ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h1 id=&quot;_intention_malicieuse_ou_non&quot; class=&quot;sect0&quot;&gt;Intention malicieuse ou non ?&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;avoue que j&amp;#8217;ai du mal Ã  comprendre les rÃ©ticences ici. Probablement parce que je suis un dÃ©veloppeur naif, mais les bugs, les amis, je suis dÃ©solÃ© de vous l&amp;#8217;apprendre, il y en aura toujours. Donc, oui, il arrivera que votre Google Home, votre Amazon Alexa ou autre, se mette Ã  enregistrer une conversation qu&amp;#8217;il n&amp;#8217;aurait pas du, et l&amp;#8217;envoie sur les serveurs de Google. En rÃ¨gle gÃ©nÃ©rale, on le comprend assez vite, parce que la douce voix robotique vous rÃ©pondra quelque chose du genre &quot;dÃ©solÃ©, je ne sais pas comment vous aider&quot;. Que s&amp;#8217;est-il vraiment passÃ© ? La box a cru entendre un mot clÃ©. Souvent, on se demande parfois pourquoi Google n&amp;#8217;offre pas la possibilitÃ© de changer ce mot clÃ© (&quot;Ok Google&quot;, &quot;hey Google&quot;, &amp;#8230;). Je pense qu&amp;#8217;une des raisons est ce que l&amp;#8217;interprÃ©tation de ce mot clÃ© est forcÃ©ment locale. La puissance nÃ©cessaire pour reconnaitre parfaitement l&amp;#8217;expression, et son contexte de dÃ©clenchement avec le bruit, est restreinte. Donc, parfois, pas de bol, Ã§a croit entendre &quot;Ok Google&quot;, ou, pire, Ã§a s&amp;#8217;enclenche lorsque la pub passe Ã  la tÃ©lÃ©. En rÃ¨gle gÃ©nÃ©rale, Ã§a fait plutÃ´t rire mes enfants, rien de dramatique. D&amp;#8217;autant qu&amp;#8217;on sait que Ã§a s&amp;#8217;enclenche grÃ¢ce au signal sonore &quot;attention, Google Ã©coute&quot;. Donc, un bug, c&amp;#8217;est un bug. Ca n&amp;#8217;est pas parce que Ã§a &lt;em&gt;peut&lt;/em&gt; envoyer des donnÃ©es sans votre accord que l&amp;#8217;intention derriÃ¨re est malicieuse. Dois-je vous rappeler les histoires d&amp;#8217;activation Ã  distance des webcams des Mac Book par la NSA ? On n&amp;#8217;est pas dans la mÃªme catÃ©gorie, lÃ . Enfin, des micros qui Ã©coutent tout le temps, vous en avez en poche depuis des annÃ©es: vos tÃ©lÃ©phones mobiles. Ils font exactement la mÃªme chose, sont activables Ã  distance, et probablement infectÃ©s de tonnes de malwares, parfois installÃ©es en usine, Ã  des fins d&amp;#8217;espionnage gouvernemental. Si je dois me mÃ©fier de quelque chose, personnelement, c&amp;#8217;est plus de Ã§a que de Google recevant ma discussion sur tata Simone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Par ailleurs, une fois la conversation envoyÃ©e sur le &quot;cloud&quot; (Ã§a fait peur, le cloud, on ne sait pas ce qui s&amp;#8217;y passe), elle est analysÃ©e. Pensez-vous que ce sont des humains qui analysent votre question et renvoie la rÃ©ponse en 2s ? Non, la puissance de calcul nÃ©cessaire pour interprÃ©ter correctement votre question et titanesque. Elle nÃ©cessite des techniques avancÃ©es (TALN, statistiques, oui, vous savez, la mÃªme chose que ce gros mot &quot;big data&quot;), et l&amp;#8217;apprentissage pour l&amp;#8217;amÃ©lioration de la qualitÃ© des rÃ©ponses requiert le stockage de quantitÃ©s monstrueuses d&amp;#8217;information. Je ne suis pas convaincu que Google doive pour autant &lt;em&gt;stocker&lt;/em&gt; toutes les conversations, mais je conÃ§ois parfaitement qu&amp;#8217;en analysant les requÃªtes de millions d&amp;#8217;utilisateurs, avec des voix diffÃ©rentes, des accents diffÃ©rents et des contextes culturels diffÃ©rents, on est capable de faire beaucoup mieux qu&amp;#8217;en ne stockant rien et analysant localement. Le temps oÃ¹ il fallait patiemment passer des heures Ã  rÃ©pÃ©ter des tonnes de phrases Ã  son logiciel de reconnaissance vocal n&amp;#8217;est pas si loin&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Donc, oui, Google va recevoir ma voix. Oui, il va l&amp;#8217;analyser et construire un profil, qu&amp;#8217;il pourra partager. Je suis au courant. Et j&amp;#8217;ai, dans la mesure du possible, restreint ces possibilitÃ©s. Je serai d&amp;#8217;autant plus heureux le jour oÃ¹ je n&amp;#8217;aurai pas besoin de lui confier mes donnÃ©es. Mais l&amp;#8217;intÃ©gration, la simpliciter d&amp;#8217;utilisation, et le seul fait que Ã§a marche, aujourd&amp;#8217;hui, est la raison de son adoption. Enfin, on dit que Ã§a marche, mais aprÃ¨s des mois d&amp;#8217;utilisation, il ne faut pas trÃ¨s longtemps pour comprendre que malgrÃ© les quantitÃ©s Ã©normes de donnÃ©es dont Google dispose, dans de trÃ¨s nombreux cas, l&amp;#8217;assistant est complÃ¨tement Ã  la ramasse. Genre, on lui demande si un match passe sur TF1, il est incapable de rÃ©pondre. On lui demande &quot;quel temps va-t-il faire&quot;, il comprend &quot;tempÃ©rature&quot;. On apprend mÃªme Ã  reformuler nos questions pour que l&amp;#8217;assistant les comprenne. Bizarre, et frustrant. Mais, Ã§a montre les limite de la technologie, et casse quelques mythes. En particulier, il faut se mÃ©fier des annonces autour de Google Duplex, l&amp;#8217;assistant qui prend des rendez-vous Ã  votre place: oui, Ã§a marche, c&amp;#8217;est bluffant, mais il est conÃ§u pour cette tÃ¢che spÃ©cifique, et il est finalement assez simple, d&amp;#8217;aprÃ¨s les premiers retours, de lui faire perdre le fil.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;_la_relation_homme_machine&quot; class=&quot;sect0&quot;&gt;La relation homme-machine&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;NÃ©anmoins, la conversation a dÃ©viÃ© vers l&amp;#8217;intelligence artificielle en rÃ¨gle gÃ©nÃ©rale, et la relation qu&amp;#8217;on a avec les machines. Sur ce sujet, je suis &lt;em&gt;extrÃªmement&lt;/em&gt; ouvert. Je suis trÃ¨s introverti, et, personnellement, avoir une conversation avec une machine a un cÃ´tÃ© rassurant. Me demandez pas pourquoi, c&amp;#8217;est un fait. Je narrais aussi cette anecdote Ã  mon frÃ¨re: un de mes enfants a des difficultÃ©s Ã  parler aux adultes. Il marmonne, ne les regarde pas dans les yeux, et met &lt;em&gt;beaucoup&lt;/em&gt; de temps Ã  leur accorder sa confiance (mais une fois qu&amp;#8217;elle est acquise, il n&amp;#8217;y a plus de pb). Personnellement, Ã§a ne m&amp;#8217;a jamais inquiÃ©tÃ©, j&apos;Ã©tais pareil enfant, et Ã§a n&amp;#8217;a (je pense) pas fait de moi un Ãªtre associal (j&amp;#8217;espÃ¨re). Disposant de Google Home, mon fils s&amp;#8217;est naturellement mis Ã  l&amp;#8217;utiliser lui aussi. Et ses premiÃ¨res expÃ©riences Ã©taient frustrantes: n&amp;#8217;articulant pas, la machine n&apos;Ã©tait pas capable de le comprendre. En quelques semaines seulement, il a progressÃ© plus qu&amp;#8217;en plusieurs annÃ©es: dÃ©sormais, il articule et parle fort, y compris aux adultes (Ã  de rares exceptions prÃ¨s pour ceux qui l&amp;#8217;impressionnent comme le mÃ©decin). Ce sujet en a apportÃ© un autre: celui du fait de faire dire aux enfants &quot;merci&quot; ou &quot;s&amp;#8217;il te plait&quot; aux machines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Guillaume est, si j&amp;#8217;ai bien compris, contre l&amp;#8217;humanisation des machines. Pour ma part, j&amp;#8217;y suis favorable, et je suis donc pour la &quot;politesse envers les machines&quot;. Fondamentalement, je pense qu&amp;#8217;une partie des craintes de Guillaume se fondent sur le fait de confier l&amp;#8217;empathie aux machines et que des algorithmes s&amp;#8217;en servent pour nous manipuler. L&amp;#8217;autre aspect est l&amp;#8217;aliÃ©nation de l&amp;#8217;homme Ã  la machine, c&amp;#8217;est Ã  dire apprendre Ã  des enfants Ã  obÃ©ir non plus Ã  des hommes mais Ã  des machines. Soit, c&amp;#8217;est une crainte lÃ©gitime. Je suis plus cynique que celÃ : je doute qu&amp;#8217;une machine puisse faire pire qu&amp;#8217;un Ãªtre humain. En fait, j&amp;#8217;ai plus d&amp;#8217;espoir envers les machines que je n&amp;#8217;en ai envers les Ãªtres humains. L&amp;#8217;histoire a montrÃ© a de trop nombreuses occasions que l&amp;#8217;empathie n&amp;#8217;est pas l&amp;#8217;apparat de tout le monde, bien au contraire. L&amp;#8217;utilisation des biais cognitifs Ã  des fins de manipulation (vente, politique, abus de confiance), Ã§a n&amp;#8217;a rien de nouveau. Est-ce qu&amp;#8217;il faut craindre que les algorithmes fassent de mÃªme ? Oui. Serait-ce pire qu&amp;#8217;avec des humains ? J&amp;#8217;en doute, bien au contraire. L&amp;#8217;imagination perverse des hommes n&amp;#8217;est plus Ã  dÃ©montrer. Leur intolÃ©rance non plus.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;_suis_je_humain&quot; class=&quot;sect0&quot;&gt;Suis-je humain ?&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai grandi avec Star Trek.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette sÃ©rie est probablement celle qui a influencÃ© une grande partie de ma pensÃ©e. DÃ©ja dans Star Trek TOS, l&amp;#8217;ordinateur et la domotique Ã©taient au coeur de la relation homme-machine. La machine Ã©tait naturellement intÃ©grÃ©e, un personnage &quot;vivant&quot; en quelque sorte. Puis, arriva Star Trek The Next Generation, avec des personnages encore plus humanistes, mais un personnage en particulier, Data, change la donne: un Androide dont la seule quÃªte Ã©tait de devenir humain. Un membre Ã  part entiÃ¨re de l&apos;Ã©quipage. Un &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Measure_of_a_Man_%28Star_Trek:_The_Next_Generation%29&quot;&gt;Ã©pisode en particulier traite spÃ©cifiquement du sujet du droit des robots&lt;/a&gt;: Data devait-il Ãªtre considÃ©rÃ© comme une machine ou un humain ? Un scientifique a-t-il le droit de le dÃ©membrer pour l&apos;Ã©tudier sur le seul prÃ©texte qu&amp;#8217;il s&amp;#8217;agit d&amp;#8217;une machine ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;adore cette sÃ©rie pour celÃ : son humanisme, sa capacitÃ© Ã  rechercher ce qu&amp;#8217;il y a de meilleur chez l&amp;#8217;homme, et son ouverture en gÃ©nÃ©ral. Subtilement mais sÃ»rement, les sujets sensibles sur le racisme, le transhumanisme, l&amp;#8217;homosexualitÃ© y sont traitÃ©s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je fais donc partie de ceux qui prÃ©fÃ¨rent avoir une &quot;conversation&quot; avec une machine polie, lui rÃ©pondre &quot;merci&quot;, tout en sachant qu&amp;#8217;il ne s&amp;#8217;agit que d&amp;#8217;une machine, plutÃ´t de de causer Ã  un con&amp;#8230; raciste, homophobe, ou plus frÃ©quemment un tÃ©lÃ©commercial essayant toutes les techniques possibles pour me vendre ses panneaux solaires sachant pertinnement que je veux terminer ma conversation avec lui. Je pense que la politesse, le &quot;savoir vivre&quot;, procure une certaine satisfaction, une relaxation, qui est un concept totallement orthogonal avec le sujet (l&amp;#8217;homme ou la machine). Il n&amp;#8217;est pas surprenant pour moi que des autistes s&amp;#8217;ouvrent plus facilement avec la prÃ©sence d&amp;#8217;un animal (chien, chat, peu importe), ou que certaines expÃ©riences montrent des enfants &lt;a href=&quot;https://www.topsante.com/medecine/psycho/autisme/des-robots-une-aide-pour-les-enfants-autistes-63967&quot;&gt;faisant des progrÃ¨s en parlant Ã  des robots&lt;/a&gt;. L&amp;#8217;interaction, la socialisation est importante. Et si le robot est meilleur que l&amp;#8217;homme sur ce sujet, on doit s&amp;#8217;en rÃ©jouir ! L&amp;#8217;homme a toujours cherchÃ© Ã  crÃ©er des choses Ã  son image (Ã§a ne vous rapelle rien ?) et il se trouve que notre cerveau est conÃ§u pour reconnaitre la douleur de l&amp;#8217;autre (empathie) et y rÃ©agir. Je prÃ©fÃ¨re donc 100 fois, que dis-je, 1000 fois un homme poli envers un robot, qu&amp;#8217;un homme traitant une autre personne comme une machine. C&amp;#8217;est peut-Ãªtre naif, mais j&amp;#8217;ai espoir qu&amp;#8217;en apprenant Ã  des enfants Ã  Ãªtre polis envers des machines, ils apprendront d&amp;#8217;autant plus Ã  l&apos;Ãªtre envers les autres, et qu&amp;#8217;on effacera une partie de ce mal, qui est la disparition Ã  l&apos;Ã©chelle de la sociÃ©tÃ© de l&amp;#8217;empathie. Et mon rÃªve de gosse, c&amp;#8217;est de voir un Data Ã©merger. Montrer qu&amp;#8217;avec suffisamment de puissance, une machine puisse prendre son autonomie. On en est encore loin, mais, on rÃ©duit dÃ©ja ce qui est &quot;visible&quot; entre homme et machine. Si je ne suis pas capable de faire la diffÃ©rence entre un homme et une machine dans une conversation, qu&amp;#8217;est-ce que celÃ  dit de moi ? Qu&amp;#8217;est-ce que celÃ  dit de la machine ? Et si, nous mÃªmes, n&apos;Ã©tions finalement qu&amp;#8217;une machine un peu sophistiquÃ©e, issue de l&apos;Ã©volution. Une machine douÃ©e de pensÃ©e et de sentiments, mais une machine quand mÃªme.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Parlons Gradle : Episode 1</title>
      <link>http://melix.github.io/blog/2017/10/parlons-gradle.html</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2017/10/parlons-gradle.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Suite Ã  de nombreuses discussions via Twitter, j&amp;#8217;ai souhaitÃ© organiser des discussions en ligne pour que nous puissions parler de Gradle. Le premier Ã©pisode aura lieu mercredi prochain, notez la date !&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;text-align:center; color:red; font-size: 2em&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;LE MERCREDI 6 DECEMBRE , Ã  17h GMT+1 (Paris)&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La rencontre se fera via Google Hangouts. Si vous Ãªtes intÃ©ressÃ©s, envoyez-moi un mail (cedric -at- gradle -point- com) ou un &lt;a href=&quot;https://twitter.com/CedricChampeau&quot;&gt;tweet&lt;/a&gt; avec votre email pour que je vous envoie une invitation. Pour des raisons pratiques, elle se fera en franÃ§ais uniquement !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_de_quoi_va_t_on_parler&quot;&gt;De quoi va-t-on parler ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;objectif pour moi est de rÃ©colter votre ressenti sur Gradle, son utilisation, vos problÃ¨mes au quotidien, la documentation, les exemples, mais aussi ce que vous aimez, votre utilisation, &amp;#8230; Bref, votre expÃ©rience utilisateur. Certains sont encore convaincus que Maven est supÃ©rieur, ce qui, de mon point de vue, reste un mystÃ¨re, et j&amp;#8217;ai donc besoin d&amp;#8217;entendre votre feedback pour savoir comment corriger (si nous n&amp;#8217;avons pas encore entrepris de dÃ©marche dans ce sens).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bref, il s&amp;#8217;agira d&amp;#8217;une discussion ouverte, d&amp;#8217;environ 1h. Bien entendu nous pourrons parler du futur de Gradle si nous avons le temps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Au plaisir de vous voir !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Pourquoi je soutiens BenoÃ®t Hamon</title>
      <link>http://melix.github.io/blog/2017/03/soutien-hamon.html</link>
      <pubDate>Wed, 1 Mar 2017 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2017/03/soutien-hamon.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette Ã©lection prÃ©sidentielle est unique. A bien des Ã©gards. La premiÃ¨re raison, qui m&amp;#8217;est insupportable, est que pour la premiÃ¨re fois, une candidate FN, Marine Le Pen, est en position de gagner cette Ã©lection: un mirroir de ce qui se passe Ã  l&apos;Ã©chelle mondiale, avec un repli sur soi et une montÃ©e inquiÃ©tante du populisme. La seconde, parce qu&apos;Ã©videmment jamais le rejet des politiques en place n&amp;#8217;aura Ã©tÃ© aussi important. Pour autant, c&amp;#8217;est aussi une opportunitÃ©, pour une fois, de changer radicalement de sociÃ©tÃ©. Les choix qui s&amp;#8217;offrent Ã  nous sont particuliÃ¨rement clairs: une droite extrÃªmement dure avec Fillon et Le Pen, ou une gauche sans compromis avec Hamon ou MÃ©lenchon. Sans oublier, bien sÃ»r, l&amp;#8217;outsider dÃ©sormais favori Macron, dont je ne sais toujours pas s&amp;#8217;il a des convictions ou s&amp;#8217;il est simplement le reflet de la nature, qui a horreur du vide (je ne sais pas oÃ¹ voter, allons lÃ  oÃ¹ tout le monde semble se rallier).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour ma part, je vote par conviction. J&amp;#8217;aurais bientÃ´t 38 ans, et je dois dire que jamais, je n&amp;#8217;ai Ã©tÃ© si proche des idÃ©es d&amp;#8217;un candidat. Je le suis depuis plusieurs mois, bien avant la primaire, et mes amis proches savent que je leur en parlais et que je croyais en sa victoire. Dans ce billet, je veux vous donner quelques pistes pour lesquelles je soutiens BenoÃ®t Hamon, et pourquoi je vous invite Ã  le rejoindre.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
A mes lecteurs habituels, ce billet n&amp;#8217;a rien Ã  voir avec mes interventions techniques. Libre Ã  vous de l&amp;#8217;ignorer. Par ailleurs, je souligne Ã©videmment que ce qui est Ã©crit ici n&amp;#8217;engage que moi, et personne d&amp;#8217;autre que moi.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_revenu_universel&quot;&gt;Le revenu universel&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CommenÃ§ons par le revenu universel, parce qu&amp;#8217;il est le plus clivant. MÃªme pendant la primaire des gauches, j&amp;#8217;ai entendu des absurditÃ©s incroyables Ã  son sujet, ou des questions trÃ¨s orientÃ©es des journalites simplement destinÃ©es Ã  dÃ©cridibiliser cette proposition. Pourtant, c&amp;#8217;est une idÃ©e neuve, dÃ©fendue par de nombreux Ã©conomistes, &lt;a href=&quot;http://www.sudouest.fr/2017/01/25/dix-economistes-defendent-le-revenu-universel-de-BenoÃ®t-hamon-3137718-705.php&quot;&gt;de droite comme de gauche&lt;/a&gt;, ainsi que d&apos;Ã©minents chefs d&amp;#8217;entreprise, tels &lt;a href=&quot;http://www.numerama.com/politique/232346-elon-musk-juge-le-revenu-de-base-necessaire-face-aux-progres-de-la-robotique.html&quot;&gt;Elon Musk, le fondateur Tesla, Space X, devenu richissime avec la revente de PayPal&lt;/a&gt;, &amp;#8230; Pas spÃ©cialement un exemple de ratage. Rappelons son principe de base: donner, Ã  chaque citoyen, un revenu identique (dont le montant varie selon les propositions), universel, indÃ©pendemment de ses resources, Ã  compter de sa majoritÃ©. A droite, on &lt;a href=&quot;http://www.liberation.fr/debats/2017/02/06/non-le-revenu-universel-ne-decourage-pas-le-travail_1546717&quot;&gt;crie alors Ã  l&amp;#8217;assistanat&lt;/a&gt;. A gauche, on hurle qu&amp;#8217;il ne faut pas donner aux riches qui ont dÃ©ja bien assez.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais le monde change. Le travail change. Quiconque vous dit le contraire est soit aveuglÃ©, soit vous ment. Je travaille dans l&amp;#8217;informatique, et par mon activitÃ© professionnelle qui m&amp;#8217;amÃ¨ne Ã  rencontrer de nombreux dÃ©veloppeurs du monde entier, je pense Ãªtre assez bien placÃ© pour voir que ce je dÃ©veloppe, ce qui arrive, est une nouvelle rÃ©volution industrielle (mais pas seulement, les services sont aussi touchÃ©s).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En France, vous aurez dÃ©ja remarquÃ© que les caissiÃ¨res se font moins nombreuses, qu&amp;#8217;il n&amp;#8217;y a plus personne aux pÃ©ages, que le mÃ©tro n&amp;#8217;a plus de conducteur, qu&amp;#8217;on nous vend du pain frais dans un distributeur&amp;#8230; Mais nous sommes trÃ¨s en retard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;En Chine, oÃ¹ sont fabriquÃ©s nos prÃ©cieux smartphones, les monstrueuses usines employant des dizaines de milliers d&amp;#8217;ouvriers ont dÃ©ja entamÃ© leur migration vers une &lt;a href=&quot;http://alltrends.over-blog.net/2017/02/une-entreprise-remplace-90-de-ses-employes-par-des-robots.html&quot;&gt;robotisation intÃ©grale&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A Singapour et aux Etats-Unis, les &lt;a href=&quot;http://www.lemonde.fr/economie/article/2016/08/25/les-premiers-taxis-sans-chauffeur-roulent-a-singapour_4988089_3234.html&quot;&gt;taxis sont remplacÃ©s par les voitures autonomes&lt;/a&gt; (notez l&amp;#8217;ironie, au passage: pour un Fillon ou un Macron dont le modÃ¨le est &lt;a href=&quot;http://www.streetpress.com/sujet/1488276642-coursier-velo-se-fait-virer&quot;&gt;l&amp;#8217;Uberisation de la sociÃ©tÃ©, l&amp;#8217;auto-entreprenariat&lt;/a&gt;, lÃ  oÃ¹ il est clair depuis des mois que le but de cette mÃªme entreprise est le 0 salariÃ©&amp;#8230;). Des &lt;a href=&quot;http://thegoodlife.thegoodhub.com/2016/05/19/otto-camion-se-conduit-seul/&quot;&gt;poids lours conduisent tout seuls sur des centaines de kilomÃ¨tres&lt;/a&gt;. &lt;a href=&quot;http://www.lemonde.fr/technologies/article/2013/12/02/des-paquets-livres-par-drones-d-ici-cinq-ans_3523489_651865.html&quot;&gt;Amazon livre par drones&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Au Japon, ce sont mÃªmes des &lt;a href=&quot;http://www.numerama.com/tech/221747-une-i-a-remplace-34-employes-dune-assurance-au-japon.html&quot;&gt;employÃ©s d&amp;#8217;une assurance qui sont remplacÃ©s par une intelligence artificielle&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Watson, l&amp;#8217;IA dÃ©veloppÃ©e par IBM, a dÃ©ja &lt;a href=&quot;https://www.letemps.ch/sciences/2016/09/22/un-outil-diagnostic-medical-nomme-watson&quot;&gt;diagnostiquÃ© une leucÃ©mie que les mÃ©decins avaient ratÃ©e&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un &lt;a href=&quot;https://www.theguardian.com/technology/video/2017/feb/28/meet-handle-the-two-wheeled-four-legged-hybrid-robot-video&quot;&gt;robot pourra bientÃ´t transporter des charges lourdes Ã  notre place&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quoi qu&amp;#8217;on en pense, Ã  moyen terme, la &lt;strong&gt;rÃ©volution robotique&lt;/strong&gt; est en marche, et c&amp;#8217;est une bonne chose. Bien sÃ»r, on ne parle pas d&amp;#8217;un remplacement Ã  court terme. Tout celÃ  est progressif. Des mÃ©tiers vont disparaÃ®tre, d&amp;#8217;autres se transformer, d&amp;#8217;autres encore vont apparaÃ®tre, mais il est indÃ©niable que le volume de travail global disponible Ã  l&amp;#8217;humain fond comme neige : nous sommes toujours plus nombreux sur la planÃ¨te, le &lt;a href=&quot;https://data.oecd.org/chart/4KKb&quot;&gt;PIB augmente, pour autant le volume d&amp;#8217;heures travaillÃ©es Ã©volue peu&lt;/a&gt;. L&apos;Ã©tude la plus optimiste de l&amp;#8217;OCDE indique que &lt;a href=&quot;http://www.lemonde.fr/economie/article/2016/05/20/pour-l-ocde-9-des-emplois-sont-menaces-par-les-robots_4923165_3234.html&quot;&gt;prÃ¨s de 10% des emplois sont menacÃ©s Ã  court terme&lt;/a&gt;. Une autre Ã©tude parle elle de &lt;a href=&quot;http://www.francetvinfo.fr/replay-radio/nouveau-monde/les-robots-le-chomage-et-les-emplois-de-2030_1777669.html&quot;&gt;50% des emplois remplaÃ§ables par des robots Ã  l&amp;#8217;horizon 2030&lt;/a&gt;. Lorsqu&amp;#8217;on choisit une politique, il ne faut pas penser Ã  court terme, mais Ã  nos enfants. MÃªme s&amp;#8217;il est idiot d&amp;#8217;affirmer que le travail va disparaitre (qui peut sÃ©rieusement le croire ?), il se transforme, et il faut embrasser cette transformation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;en suis convaincu, les politiques qui ignorent ces changements vivent dans un monde qui n&amp;#8217;existe plus: ils achÃ¨tent leur pain au chocolat Ã  10 centimes, font leurs courses chez Prisunic et rÃªvent de payer leurs assistants parlementaires europÃ©ens en Francs. Ignorer les changements du travail, c&amp;#8217;est ignorer l&amp;#8217;avenir, s&amp;#8217;aliÃ©ner Ã  ceux qui embrassent ce changement, perdre notre souverainetÃ©. Au lieu de combattre ce futur, il faut au contraire s&amp;#8217;y prÃ©parer et repenser notre sociÃ©tÃ© autour de ces changements. L&amp;#8217;automatisation, la robotisation, n&amp;#8217;engendre pas de perte de valeur: celle-ci est toujours prÃ©sente, les prix ne baissent en gÃ©nÃ©ral pas: la productivitÃ© augmente et on rÃ©duit la pÃ©nibilitÃ©. Deux choix de sociÃ©tÃ© s&amp;#8217;engagent alors: profiter de cette amÃ©lioration pour vivre mieux, ou une fuite en avant productiviste. A ce sujet, je conseille la lecture de &lt;a href=&quot;https://crew.co/blog/why-you-shouldnt-work-set-hours/&quot;&gt;ce billet&lt;/a&gt; Ã  mes lecteurs anglophones: ou comment le temps de travail est fonction des Ã©volutions de la sociÃ©tÃ©, pas une constante.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ceci appelle Ã  une rÃ©volution fiscale: lÃ  oÃ¹ aujourd&amp;#8217;hui on taxe le travail, il faudra demain &lt;a href=&quot;http://www.lci.fr/elections/quelle-est-donc-cette-taxe-robots-proposee-par-BenoÃ®t-hamon-qui-seduit-jusqu-a-bill-gates-2026781.html&quot;&gt;taxer les robots&lt;/a&gt;, comme &lt;a href=&quot;http://fortune.com/2017/02/18/bill-gates-robot-taxes-automation/&quot;&gt;le propose aussi Bill Gates&lt;/a&gt;. Si ce terme peut faire sourire, il cache en rÃ©alitÃ© de nombreuses ramifications: Ã©vasion fiscale en particulier. Quelle pire injustice que de voir nos petites entreprises crouler sous des 30% de taxes, lorsque les grandes entreprises Ã©trangÃ¨res qu&amp;#8217;on utilise tous (smartphones, distribution), qui robotisent, automatisent et n&amp;#8217;embauchent quasiment pas, placent &quot;leur&quot; argent dans des paradis fiscaux et ne paient pas d&amp;#8217;impÃ´ts, grÃ¢ce Ã  des montages financiers complexes avec la complicitÃ© de nos cabinets comptables ? Ne marchons nous pas sur la tÃªte ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alors, oui, on peut continuer Ã  sourire, dire qu&amp;#8217;il faut baisser les charges pour les entreprises et les salariÃ©s (ce qui serait une bonne chose), mais si on n&amp;#8217;embrasse pas cette virtualisation de l&apos;Ã©conomie, on ne fait que rÃ©duire l&amp;#8217;assiÃ¨te des cotisations, et se ruiner un peu plus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alors que vient faire le revenu universel lÃ  dedans ? Il permet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;de mettre fin Ã  la grande pauvretÃ©, en particulier en remplaÃ§ant le RSA, belle idÃ©e mais tellement complexe que nombreux sont ceux qui y ont droit et ne le demandent pas. Par ailleurs, si le revenu est effectivement universel, l&amp;#8217;argument de la fraude aux aides ne tient plus: tout le monde y a droit, point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;de favoriser le temps partiel. Dans certains Etats, comme les &lt;a href=&quot;http://www.lemonde.fr/economie/article/2016/02/03/aux-pays-bas-on-travaille-en-moyenne-30-heures-par-semaine_4858496_3234.html&quot;&gt;Pays-Bas, c&amp;#8217;est dÃ©ja la norme, y compris chez les hommes&lt;/a&gt;, rÃ©duisant ainsi les inÃ©galitÃ©s homme-femme. Le PIB de ce pays n&amp;#8217;a pas chutÃ©, les employÃ©s n&amp;#8217;en sont que plus heureux.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;de maintenir l&amp;#8217;emploi. Des histoires d&amp;#8217;agriculteurs qui travaillent comme des fous et ne s&amp;#8217;en sortent plus, on en lit tous les jours. Avec &lt;a href=&quot;https://twitter.com/BenoÃ®thamon/status/836905767571697664&quot;&gt;350â¬&lt;/a&gt; par mois, franchement, vous resteriez? Je connais personnellement l&amp;#8217;un d&amp;#8217;entre eux qui a fini par abandonner. Avec le revenu universel, on permet Ã  ces travailleurs pauvres de rester en poste.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;de choisir de travailler plutÃ´t que rester Ã  la maison. Je ne sais pas pour vous, mais le nombre de fois oÃ¹ j&amp;#8217;ai entendu quelqu&amp;#8217;un me dire &quot;avec mes frais de garde et de transport, Ã§a me revient plus cher d&amp;#8217;aller travailler que de rester chez moi&quot;. Pas franchement encourageant, non?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;de valoriser des activitÃ©s non commerciales mais importantes pour la sociÃ©tÃ© : travail associatif, aides Ã  la personne, &amp;#8230;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;de partager le travail: Ã  coÃ»t Ã©gal pour une entreprise, il sera possible de prendre 2 salariÃ©s au lieu d&amp;#8217;un seul, et ainsi donc rÃ©duire les risques de TMS (pour les travaux manuels) ou burn-outs : il existe une limite physique Ã  la productivitÃ©.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En revanche, le RU ne rend pas les riches plus riches. C&amp;#8217;est un &lt;strong&gt;revenu&lt;/strong&gt;. En consÃ©quence, il est imposable. Il s&amp;#8217;ajoute donc Ã  votre salaire et suivant vos revenus, vous devrez payer ou non des impÃ´ts dessus. Il est donc incorrect de dire que Ã§a coute 400 milliards (ou plus). En pratique, il coÃ»te sensiblement moins, en particulier si son implÃ©mentation se fait &lt;em&gt;via&lt;/em&gt; un crÃ©dit d&amp;#8217;impÃ´t. La justice fiscale est maintenue. Le soumettre Ã  conditions de ressources, c&amp;#8217;est augmenter son coÃ»t intrinsÃ¨que (gestion, contrÃ´les) ou inciter Ã  la fraude pour quelque chose qui ne change au final rien. Quant Ã  l&amp;#8217;argument de l&amp;#8217;incitation Ã  l&amp;#8217;oisivetÃ©, il me fait doucement sourire. A tous ceux qui me l&amp;#8217;ont avancÃ©, je leur ai posÃ© une question simple: si on vous donnait 600â¬ par mois, est-ce que vous quitteriez votre boulot ? Est-ce que Ã§a vous suffirait ? Je pense que je n&amp;#8217;ai pas besoin de vous donner les rÃ©ponses&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alors, certains taxent cette proposition d&amp;#8217;irrÃ©aliste, utopique, irrÃ©alisable et j&amp;#8217;en passe. Ils doutent de sa crÃ©dibilitÃ©. Mais que proposent-ils ? Toujours les mÃªmes solutions ! RÃ©duire les charges des entreprises (merci Fillon pour son exonÃ©ration sur les bas salaires, effet d&amp;#8217;aubaine pour n&amp;#8217;augmenter personne, alors que la rÃ©partition de la valeur n&amp;#8217;a &lt;a href=&quot;http://www.inegalites.fr/spip.php?page=article&amp;amp;id_article=1156&quot;&gt;jamais Ã©tÃ© aussi dÃ©vaforable aux pauvres et classes moyennes&lt;/a&gt;). Augmenter la TVA (belle justice fiscale !). Qui se souvient, Ã  l&amp;#8217;inverse, de la baisse de la TVA pour la restauration, en l&apos;Ã©change, soit disant, d&amp;#8217;emplois et de baisses de prix ? Qui se souvient encore du badge &lt;a href=&quot;http://www.lemonde.fr/emploi/article/2014/09/24/pierre-gattaz-oui-il-est-possible-de-creer-un-million-d-emplois_4493160_1698637.html&quot;&gt;1 million d&amp;#8217;emplois de Pierre Gattaz&lt;/a&gt; en l&apos;Ã©change du pacte de compÃ©titivitÃ© ? Travailler plus, en dÃ©fiscalisant les heures supplÃ©mentaires, encore une mesure populaire, mais qui ne crÃ©e pas d&amp;#8217;emplois (la vraie injustice), et n&amp;#8217;est qu&amp;#8217;un pansement sur une jambe de bois: est-ce que cette politique a dÃ©ja une seule fois marchÃ© ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Autre question: qui peut encore croire que repousser l&apos;Ã¢ge de la retraite est une solution, alors mÃªme que les seniors sont &lt;a href=&quot;http://www.lemonde.fr/societe/article/2011/07/29/chomage-les-seniors-sont-indesirables-dans-les-entreprises_1553945_3224.html&quot;&gt;&quot;trop vieux pour travailler&quot; dÃ¨s 50 ans&lt;/a&gt; ? Je ne suis fondamentalement pas contre repousser l&apos;Ã¢ge de la retraite (qui finalemement va de pair avec l&amp;#8217;augmentation de l&amp;#8217;espÃ©rance de vie), mais faire Ã§a alors mÃªme que nos seniors sont au chÃ´mage n&amp;#8217;a aucun sens. Il faut d&amp;#8217;abord revaloriser l&amp;#8217;expÃ©rience, changer notre vision. Comment peut-on imaginer crÃ©er des emplois en faisant travailler plus ceux qui ont la chance d&amp;#8217;en avoir un, &lt;a href=&quot;http://www.francetvinfo.fr/replay-radio/on-s-y-emploie-de-philippe-duport/l-inquietante-progression-des-troubles-musculo-squelettiques_1790187.html&quot;&gt;quitte Ã  les briser&lt;/a&gt; ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;60 milliards ont Ã©tÃ© engloutis dans le CICE, pour quel rÃ©sultat ? Autre solution classique, se reposer sur une croissance, dont les prÃ©visions sont systÃ©matiquement revues Ã  la baisse, et donc les consÃ©quences sur notre planÃ¨te commencent sÃ©rieusement Ã  se faire sentir ? Ou faciliter le licenciement, en croyant dogmatiquement que Ã§a facilite l&amp;#8217;embauche ? Ce dont ont besoin les entreprises, ce n&amp;#8217;est pas de pouvoir licencier. Personne ne veut licencier par plaisir. Ce qu&amp;#8217;il faut, c&amp;#8217;est de la stabilitÃ©. Connaitre les rÃ¨gles du jeu Ã  l&amp;#8217;avance, et qu&amp;#8217;elles ne changent pas tous les jours, ainsi qu&amp;#8217;une juste concurrence : que les petites paient les mÃªmes impÃ´ts que les grosses, et que les diffÃ©rences de lÃ©gislation entre partenaires commerciaux ne soient pas un frein aux entreprises locales (donc, un protectionnisme &lt;em&gt;raisonnÃ©&lt;/em&gt;). Alors, dites-moi, qui est irrÃ©aliste et utopique ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alors, on va nous parler de &quot;valeur travail&quot;. Ou la rÃ©alisation par le travail. Est-ce lÃ  une valeur que je veux transmettre Ã  mes enfants ? Non. Si le travail est important, il ne doit pas Ãªtre le critÃ¨re de rÃ©alisation, en particulier dans une sociÃ©tÃ© ou le travail se rarÃ©fie. C&amp;#8217;en est de plus insultant pour tous ceux qui ne trouvent pas d&amp;#8217;emploi, ou pour ceux qui s&amp;#8217;investissent autrement (associations, sportifs, artistes) et contribuent Ã  la grandeur de notre pays. Ce que j&amp;#8217;enseigne Ã  mes enfants, c&amp;#8217;est qu&amp;#8217;il faut se donner Ã  fond et ne pas se fermer de portes. Je leur apprends la tolÃ©rance. Je leur apprends Ã  apprÃ©cier la chance qu&amp;#8217;ils ont par rapport Ã  d&amp;#8217;autres. Je leur apprends que l&amp;#8217;effort est rÃ©compensÃ©, mais que parfois, la vie est injuste. Travailler, oui, mais choisir. Le choix, la libertÃ© sont la clÃ© de la rÃ©alisation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et d&amp;#8217;avenir, parlons-en.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_r_volution_cologique&quot;&gt;La rÃ©volution Ã©cologique&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lorsqu&amp;#8217;on parle de rÃ©volution industrielle, on ne peut ignorer la transition Ã©cologique Ã  mener, et son potentiel Ã©norme en termes d&amp;#8217;emplois. La France a trop longtemps dirigÃ© tous ses crÃ©dits vers le nuclÃ©aire, en en ignorant volontairement le coÃ»t rÃ©el (dÃ©mantÃ¨lement, notamment) et son impact sur l&amp;#8217;environnement (bien sÃ»r, un accident n&amp;#8217;arrive jamais). Mais le plus gros mensonge, c&amp;#8217;est encore notre fameuse indÃ©pendence Ã©nergÃ©tique. Faut-il rappeler d&amp;#8217;oÃ¹ vient le combustible si prÃ©cieux dont nous avons besoin ? Pour autant, il ne faut pas Ãªtre naif: sortir du nuclÃ©aire prend du temps, mais c&amp;#8217;est aussi une Ã©norme opportunitÃ©. En Ã©chelonnant dans le temps, comme le propose BenoÃ®t Hamon, on permet de maintenir notre capacitÃ© de production, tout en ouvrant de nouvelles voies de dÃ©veloppement, crÃ©ant des emplois. La catastrophe serait de faire comme en Allemagne, oÃ¹ toutes les centrales ont Ã©tÃ© remplacÃ©es par des centrales Ã  charbon, dont le bilan carbone est redoutable&amp;#8230; Cette &lt;a href=&quot;http://www.electricitymap.org/&quot;&gt;carte interactive&lt;/a&gt; est plus que parlante&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais l&apos;Ã©cologie ne se limite pas au nuclÃ©aire. L&amp;#8217;opposition ferme de BenoÃ®t Hamon aux perturbateurs endocriniens est un autre exemple de ce que j&amp;#8217;aime dans sa vision: il est temps d&amp;#8217;en finir avec la dictature de la croissance, qui dÃ©truit notre environnement et provoque de graves maladies. Penser que je puisse Ãªtre responsable du futur cancer de mes enfants m&amp;#8217;est juste impossible: si je peux faire quelque chose aujourd&amp;#8217;hui, quitte Ã  sacrifier un peu de confort (je suis le premier Ã  changer de smartphone tous les 3/4 ans, mais en ai-je vraiment besoin ?), faisons-le. Il existe des solutions: circuits courts, production raisonnÃ©e, retour Ã  une agriculture prenant en compte les spÃ©cificitÃ©s rÃ©gionales, rÃ©duction de notre consommation de viande, &amp;#8230; Nous devons aussi nous responsabiliser en tant que consommateurs: acheter toujours moins cher, c&amp;#8217;est inciter Ã  la baisse des salaires ou Ã  la dÃ©localisation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_r_publique&quot;&gt;La RÃ©publique&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un des derniers points que je souhaite discuter ici est ma vision de la RÃ©publique. Tout d&amp;#8217;abord, je souhaite le retour au septennat. Je pense que le passage au quinquÃ©nat a Ã©tÃ© une catastrophe, contribuant Ã  la peopolisation de la politique: on ne cherche plus Ã  faire un projet, on parle tout de suite de la prochaine Ã©lection. MÃªme si je n&amp;#8217;ai pas d&amp;#8217;idÃ©e prÃ©cise de ce que doit Ãªtre la prochaine RÃ©publique, il me semble clair que celle-ci est Ã  bout de souffle. ConÃ§ue pour le GÃ©nÃ©ral de Gaulle, l&amp;#8217;homme providentiel. Je pense qu&amp;#8217;il faut revoir le rÃ´le de PrÃ©sident, et qu&amp;#8217;il ne soit plus qu&amp;#8217;un garant de nos institutions. Pour celÃ , il nous faut une assemblÃ©e consistuante. BenoÃ®t Hamon n&amp;#8217;en parle pas spÃ©cialemement, et c&amp;#8217;est peut-Ãªtre un des points oÃ¹ je suis plus en accord avec un MÃ©lenchon que lui: il faut bien des points de dÃ©saccord. En particulier, je trouve l&amp;#8217;idÃ©e du 49-3 citoyen avec seulement 1% du corps Ã©lectoral potentiellement dangereuse : la Manif pour Tous aurait pu bloquer le mariage homosexuel (oui, je suis de ceux qui pensent que donner des droits Ã©gaux Ã  tous les citoyens n&amp;#8217;est pas supprimer vos propres droits), ou, du temps de Mitterand, je doute que la peine de mort aurait pu Ãªtre abolie. En clair, je suis plutÃ´t pour une proportionnelle intÃ©grale, rÃ©pondant Ã  une crise de reprÃ©sentativitÃ© qu&amp;#8217;entretient Ã©lÃ©gamment le FN. Mais je suis aussi surtout pour la &lt;a href=&quot;https://fr.wikipedia.org/wiki/Tirage_au_sort_en_politique#Stochocratie&quot;&gt;stochocratie&lt;/a&gt;, oÃ¹ le fait de tirer au sort des reprÃ©sentants qui, eux, Ã©liront ceux qui nous gouvernent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_cit_et_peur_de_l_autre&quot;&gt;LaÃ¯citÃ© et peur de l&amp;#8217;autre&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une de mes plus grandes dÃ©sillusions de l&apos;Ã¨re Hollande. C&amp;#8217;est lÃ  que le Parti Socialiste m&amp;#8217;a perdu. J&amp;#8217;ai Ã©tÃ© affligÃ© par la Loi Renseignement. Non seulement elle est liberticide, mais elle est aussi dangereuse pour nos entreprises, rÃ©duisant considÃ©rablement les sÃ©curitÃ©s et garanties qu&amp;#8217;elles peuvent mettre en place pour leurs clients. Mais le plus grave, le divorce, ce fut la dÃ©chÃ©ance de nationalitÃ©. Sous prÃ©texte de protÃ©ger nos concitoyens, nous crÃ©ons deux catÃ©gories de personnes, ce qui est le contraire mÃªme des fondements de notre RÃ©publique. Plus encore, une trahison des valeurs de gauche. Aux Ã©lections qui ont suivi, pour la premiÃ¨re fois de ma vie, je n&amp;#8217;ai pas votÃ© PS. Fort heureusement, cette mesure n&amp;#8217;est jamais passÃ©, j&amp;#8217;aurais eu honte, franchement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En ce qui concerne le dÃ©bat sur la laÃ¯citÃ©, lÃ  encore, je suis Ã  100% derriÃ¨re la position de BenoÃ®t Hamon: la loi 1901 et rien que la loi 1901. En clair, il s&amp;#8217;agit de respecter la libertÃ© de culte. Et respecter &lt;em&gt;toutes&lt;/em&gt; les religions. Point. Il faut Ãªtre sacrÃ©ment culottÃ© (ou aigri), pour dire &quot;BenoÃ®t Hamon est en rÃ©sonance avec une frange islamo-gauchiste&quot;. Malek Boutih, je vous le dis sincÃ¨rement, cest propos sont une honte pour la gauche. Les simples sous-entendus de cette phrase me dÃ©goutent. Pire, vous avez donnÃ© des arguments Ã  l&amp;#8217;extrÃ¨me droite, que nous combattons de tout notre coeur. C&amp;#8217;est indigne et tellement typique de cette gauche archaÃ¯que (un paradoxe quand vous vous qualifiez de progressiste) et loin de ses valeurs. AprÃ¨s de telles sorties, ne soyez plus surpris que les gens votent FN et vous bottent les fesses aux Ã©lections.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Non, je crois aux valeurs humaines. Le FN tente de nous faire croire que 2000 migrants sont responsables du chÃ´mage en France, par pitiÃ©, non. Pire encore, les migrants violent nos femmes et mangent nos enfants. Et ils n&amp;#8217;avaient qu&apos;Ã  &lt;a href=&quot;https://s2.qwant.com/thumbr/0x0/d/4/f17a15e2d5fe46ad9f63b25011b969/b_1_q_0_p_0.jpg?u=http%3A%2F%2Fd.ibtimes.co.uk%2Fen%2Ffull%2F1410255%2Faleppo-syria.jpg&amp;amp;q=0&amp;amp;b=1&amp;amp;p=0&amp;amp;a=1&quot;&gt;rester chez eux&lt;/a&gt;, ou &lt;a href=&quot;http://www.bfmtv.com/international/migrations-l-europe-sous-le-choc-apres-la-photo-d-un-enfant-mort-noye-911785.html&quot;&gt;apprendre Ã  nager&lt;/a&gt;. Nom d&amp;#8217;un chien, oÃ¹ est passÃ© le coeur de la France ? Doit-on laisser mourrir tous ces gens, les suspecter des pires crimes, ou Ãªtre Ã  la hauteur de notre histoire, nous, le pays des Droits de l&amp;#8217;Homme ? Se dire que l&amp;#8217;allemagne accueille des millions de migrants dans le mÃªme temps oÃ¹ l&amp;#8217;on fait des procÃ¨s Ã  &lt;a href=&quot;http://www.francetvinfo.fr/monde/europe/migrants/aide-aux-migrants-cedric-herrou-le-passeur-condamne_2056739.html&quot;&gt;CÃ©dric HÃ©rrou&lt;/a&gt;. Dois-je vous rappeler ce que la stigmatisation nous a apportÃ© voici 80 ans ? Ce monde tourne sur la tÃªte&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_cas_macron_m_lenchon&quot;&gt;Les cas Macron / MÃ©lenchon&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour terminer, parlons rapidement d&amp;#8217;Emmanuel Macron et Jean-Luc MÃ©lenchon. A la lecture de ce billet, certains peuvent se dire que je pourrais choisir MÃ©lenchon. C&amp;#8217;est vrai, lui et Hamon partagent beaucoup d&amp;#8217;idÃ©es, tout comme les Verts et Ã  ce titre je suis dÃ©pitÃ© qu&amp;#8217;un accord entre les 3 n&amp;#8217;ait pas eu lieu. C&apos;Ã©tait, Ã  mon humble avis, une opportunitÃ© unique pour la gauche compte-tenu de la conjecture actuelle. Je pense, pour ma part, que BenoÃ®t Hamon a vÃ©ritablement compris la transition Ã©conomique qui nous attend et a une personnalitÃ© moins clivante. Les solutions de repli sur soi ne fonctionneront pas. Pas plus que les solutions de Macron, qui reste une Ã©nigme. Ses discours sont d&amp;#8217;une platitude dÃ©concertante, ses solutions en matiÃ¨re d&apos;Ã©conomie sont peu ou prou les mÃªmes que celles de Fillon (libÃ©ralisation Ã  outrance du marchÃ© du travail), et pourtant&amp;#8230; il monte, il monte&amp;#8230; Le ralliement de FranÃ§ois Bayrou, celui lÃ  mÃªme qui disait, il y a quelques semaines, que &lt;a href=&quot;http://www.lefigaro.fr/elections/presidentielles/2017/02/22/35003-20170222ARTFIG00291-avant-de-le-soutenir-bayrou-attaquait-durement-macron.php&quot;&gt;Macron Ã©tait pilotÃ© par les banquiers&lt;/a&gt; (ce qui est toujours possible puisqu&amp;#8217;il refuse d&amp;#8217;indiquer qui le finance)&amp;#8230; Je peux me tromper, mais je ne crois pas non plus Ã  la fin du clivage droite-gauche. Nos idÃ©es sont diffÃ©rentes. Nos visions de la sociÃ©tÃ© sont diffÃ©rentes. Progresser, c&amp;#8217;est choisir une vision, et y aller. Faire cohabiter des idÃ©es si diffÃ©rentes au sein d&amp;#8217;un mÃªme gouvernement ne peut conduire qu&apos;Ã  prendre de &quot;petites&quot; dÃ©cisions ne frustrant personne. Soyez rassurÃ©s, cependant, je ne mets pas Emmanuel Macron au mÃªme niveau que FranÃ§ois Fillon ou Marine Le Pen&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion, je ne suis pas crÃ©dule non plus, tout ceci n&amp;#8217;est pas rÃ©alisable en un jour et c&amp;#8217;est pour celÃ  je j&amp;#8217;aime l&amp;#8217;approche de BenoÃ®t Hamon: &lt;strong&gt;jamais&lt;/strong&gt; il ne s&amp;#8217;est prÃ©sentÃ© comme le candidat providentiel, qui a la rÃ©ponse Ã  tout. Il faut laisser le temps Ã  une politique de se mettre en place (d&amp;#8217;oÃ¹ le septennat). Hamon est un homme qui a une vision, il a travaillÃ© ses dossiers, mais c&amp;#8217;est aussi un &lt;a href=&quot;https://www.BenoÃ®thamon2017.fr/2017/02/22/rejoignez-le-conseil-citoyen/&quot;&gt;team player&lt;/a&gt;. Toutes ses mesures sont rÃ©flÃ©chies, travaillÃ©es, et vont dans le sens d&amp;#8217;un projet Ã  long terme: un avenir dÃ©sirable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La sociÃ©tÃ© que l&amp;#8217;on souhaite pour nos enfants. C&amp;#8217;est Ã  eux que je pense en le choisissant. Ce dont ils ont besoin, c&amp;#8217;est d&amp;#8217;espoir. Je ne veux pas qu&amp;#8217;ils grandissent dans ce monde qu&amp;#8217;on nous promet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.marianne.net/societe/auchan-city-de-tourcoing-apres-la-fausse-couche-d-une-caissiere-les-inquietants-recits-de&quot;&gt;https://www.marianne.net/societe/auchan-city-de-tourcoing-apres-la-fausse-couche-d-une-caissiere-les-inquietants-recits-de&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.streetpress.com/sujet/1488276642-coursier-velo-se-fait-virer&quot;&gt;http://www.streetpress.com/sujet/1488276642-coursier-velo-se-fait-virer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.bfmtv.com/societe/vaucluse-suicide-d-un-agriculteur-dont-l-exploitation-etait-en-difficulte-963138.html&quot;&gt;http://www.bfmtv.com/societe/vaucluse-suicide-d-un-agriculteur-dont-l-exploitation-etait-en-difficulte-963138.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://francais.rt.com/france/19526-hauts-seine&amp;#8212;tabassee-pour&quot;&gt;https://francais.rt.com/france/19526-hauts-seine&amp;#8212;tabassee-pour&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et vous ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Gradle and Kotlin, a personal perspective</title>
      <link>http://melix.github.io/blog/2016/05/gradle-kotlin.html</link>
      <pubDate>Sun, 22 May 2016 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">2016/05/gradle-kotlin.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_gradle_embraces_kotlin_what_about_groovy&quot;&gt;Gradle embraces Kotlin, what about Groovy?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all, it&amp;#8217;s been a long time since I last blogged, and I&amp;#8217;d like to remind that everything written here are opinions of my own and not the views of my employer, which happens to be Gradle Inc as write those lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few days ago, &lt;a href=&quot;http://gradle.org/blog/kotlin-meets-gradle/&quot;&gt;Gradle and Jetbrains announced a partnership to make Kotlin a first class language for Gradle builds&lt;/a&gt;, both for build scripts and plugins. Most likely, you know Gradle has been using Groovy since its inception. Lots of people think that Gradle is written in Groovy, which is actually wrong. Most of Gradle is written in Java. The builds scripts are written in Groovy, lots of plugins are written in Groovy, our test cases are written in Groovy (using the best testing framework out there, Spock), but Gradle itself is written in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From my perspective, this is situation has been very disturbing and continues to be so. I have very good friends in the Groovy community, and this move has been seen by some of them as a betrayal. As an Apache Groovy committer, and someone who spent almost 4 years full time implementing new features of the language, most importantly its static compiler, seeing Kotlin promoted as the language of choice for Gradle&amp;#8217;s future, it&amp;#8217;s a little &lt;em&gt;strange&lt;/em&gt;. One could legitimely say, &lt;em&gt;WTF?&lt;/em&gt; I&amp;#8217;ve been aware of this work for several months now, and my colleagues Rodrigo B. de Oliveira and Chris Beams have done an amazing job in a very short period of time. From a long time Groovy user and Groovy developer point of view, it&amp;#8217;s hard not to make this move an emotional thing. However, business is not about emotions. In particular, what are we trying to acheive with Gradle? We&amp;#8217;re trying to help developers build their applications. We&amp;#8217;re trying to make this elegant, reproducible, scalable and fast. We&amp;#8217;re language agnostic. We can build Java, Groovy, Scala, Kotlin, C++, Python, &amp;#8230; Gradle has never been the tool to build Groovy applications: it&amp;#8217;s been a tool to build software. It&amp;#8217;s a tool about automation. And I&amp;#8217;ve been complaining enough about communities that build their own tool for their very specific language to understand that this is super important: Gradle is (or aims at) the best tool for building any kind of software. In short, we must think in terms of what is best for our users, and sometimes, this means changing technogies. A product should not be bound to a technology, but a company should even less be bound to it. And given the response that we had after the announcement, supporting Kotlin seem to drive a lot of excitement around Gradle, and that&amp;#8217;s a very good thing. So, let&amp;#8217;s take that out, and think what it means for Groovy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_groovy_support_is_not_abandoned&quot;&gt;Groovy support is not abandoned&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all, I already said it several times, but better continue to spread the message: support for Groovy in Gradle is &lt;strong&gt;not&lt;/strong&gt; deprecated nor removed. You can still write your scripts in Groovy, you can write your plugins in Groovy, and you will still be able to do it. But Gradle will likely encourage users to migrate to Kotlin. To be clear, Kotlin support is incubating, and there&amp;#8217;s a lot to do to make it as usable as the Groovy version. Second, there are tens of thousands of builds written using Groovy, hundreds of plugins written in Groovy, so it&amp;#8217;s not tomorrow that Kotlin is going to replace Groovy. However, we care about the future, so we need to think about what it means in the long term. Should we be excited about supporting Kotlin? Yes we should, because Kotlin is an amazing language. Should we continue to be excited about Groovy? Of course we should, because it&amp;#8217;s also an amazing language. But it&amp;#8217;s old and as such brings a lot of legacy with it. As someone who implemented the static compiler for Groovy, I know it very well. There are things that are hard to change, because a large part of the Groovy community is very fond of its dynamic behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So let&amp;#8217;s focus on the two major aspects that led to embracing Kotlin in Gradle. The fist one, and principal, is IDE support. Let&amp;#8217;s face it: even before I joined Gradle, when I was giving talks about it, people were complaining about IDE support. Compared to a tool like Maven, supporting Gradle build scripts is complicated. Supporting XML is easy (to some extent). Supporting a &lt;em&gt;dynamic DSL&lt;/em&gt; is not. Some say it&amp;#8217;s Groovy&amp;#8217;s fault, and I want to correct this statement right now: it&amp;#8217;s not Groovy&amp;#8217;s fault. While Groovy let&amp;#8217;s you design dynamic DSLs, the design of the DSL can be changed to make it easier for tools to &quot;discover&quot; things. But when Gradle was designed, there wasn&amp;#8217;t any statically compiled Groovy. The idiomatic way to write DSLs in Groovy, at that time, was to heavily rely on &lt;em&gt;runtime metaprogramming&lt;/em&gt;. While loving &lt;em&gt;metaprogramming&lt;/em&gt;, I&amp;#8217;ve always prefered &lt;em&gt;compile time&lt;/em&gt; metaprogramming over &lt;em&gt;runtime&lt;/em&gt; metaprogramming. For multiple reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;because in most cases, what you want to do at runtime can be done in a unique, setup phase. For example, create your metaclasses, enrich existing types, configure &lt;em&gt;property missing&lt;/em&gt;, &lt;em&gt;method missing&lt;/em&gt;, &amp;#8230; If it&amp;#8217;s setup, it&amp;#8217;s better done at compile time, because you can report errors, and because it gives higher performance. This led the way I designed the static compiler, and more features of Groovy after that (traits, type checking extensions, &amp;#8230;) : describe what you want to do at compile time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;because it makes the life of tools easier. While IntelliJ or Eclipse support &lt;em&gt;DSL descriptors&lt;/em&gt; that help them provide completion, those are hard to implement, and often inaccurate. They can only approximate what is going to happen at runtime. And in the end, you&amp;#8217;re doing the same job twice: you&amp;#8217;re writing a runtime for your DSL, which is dynamic, then you need to write a DSL descriptor for the IDE to understand it. Wouldn&amp;#8217;t it be better if all was done in a unique place? Something that both the compiler and the IDE can understand?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So while we &lt;em&gt;know&lt;/em&gt; we can describe dynamic Groovy DSLs so that they are understood by IDEs, it&amp;#8217;s effectively a lot of work. And if you want to support multiple IDEs, it&amp;#8217;s even more work. But in the case of Gradle, it&amp;#8217;s even worse: each plugin can provide it&amp;#8217;s own &quot;micro DSL&quot;. While there&amp;#8217;s an &quot;idiomatic&quot; way to configure Gradle builds, it&amp;#8217;s no single rule. One can implement it&amp;#8217;s own Groovy DSL within the Gradle build. And no luck the IDE would ever understand it. Another pain point is that Gradle adds complexity to complexity in terms of DSL capabilities. For example, when you have a build script that has:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;dependencies {
   compile libraries.groovy
}

greeter {
   message = &apos;hello&apos;
}

sign {
   signature = top
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;often people do not realize that:
   - &lt;code&gt;dependencies&lt;/code&gt; is found on a &lt;code&gt;Project&lt;/code&gt; instance
   - &lt;code&gt;libraries&lt;/code&gt; is a user declared variable, that can be found in a plugin, another build script, a project properties file, &amp;#8230; (how does the IDE find about it?)
   - &lt;code&gt;greeter&lt;/code&gt; is a &lt;em&gt;convention object&lt;/em&gt;, defined by a plugin, to configure the default values of its task
   - &lt;code&gt;sign&lt;/code&gt; is a &lt;em&gt;task&lt;/em&gt;, which has a &lt;code&gt;signature&lt;/code&gt; property, and &lt;code&gt;top&lt;/code&gt; references an &lt;em&gt;extension property&lt;/em&gt; from the project&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So while this build script is &lt;em&gt;simple to read&lt;/em&gt;, it&amp;#8217;s &lt;em&gt;hard to understand how it effectively works&lt;/em&gt;, because objects can be found at different places, can be provided by different providers (plugins, properties, extensions), but everything is accessed using a single notation. This is bad, because it makes it almost impossible for an IDE to understand what is going on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The question is, is it Groovy&amp;#8217;s fault? My answer is &lt;em&gt;not totally&lt;/em&gt;. The fault is mostly on the DSL design, and Groovy made it too easy to do so. But again, that was designed at a time when dynamic Groovy was the rule. I gave a talk, recently, about &lt;a href=&quot;https://www.google.fr/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwiW2Mftt-7MAhWKSRoKHQJtCcIQtwIIHTAA&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DnqqGtdvPzus&amp;amp;usg=AFQjCNH57qeR_jUUIAmGKZiQOK99v0669w&quot;&gt;building modern DSLs with Groovy&lt;/a&gt;, where I discourage such practices, and encourage the use of &lt;em&gt;static DSLs&lt;/em&gt; instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That leads me to the second main reason of embracing Kotlin in Gradle: performance. When we talk about performance, lots of folks tend to think that Groovy is slow. This is not the case. Groovy is pretty fast. However, depending on the design of the DSL, you can easily fall into traps that can lead to catastrophic performance. Before I go further with it, I&amp;#8217;m reading way to often that Gradle is slow &lt;em&gt;because it&amp;#8217;s written in Groovy&lt;/em&gt; and that &lt;em&gt;Groovy is dynamic so it&amp;#8217;s slow&lt;/em&gt;. F* no, those who tell you that just didn&amp;#8217;t profile a build. As I said, Gradle is mostly written in Java. And I&amp;#8217;ve spent the last 3 months optimizing the performance of Gradle, and I can tell you that of the dramatic performance improvements that one can see in Gradle 2.13 and 2.14, almost none was obtained by rewriting Groovy to Java, or rewriting Groovy code. None! Most of the hotspots were pure Java code. Period. However, as soon as you use plugins, which are today mostly written in dynamic Groovy, or that your build scripts imply a lot of nested closures, things start to become complicated for &quot;Groovy&quot;. Let me explain that clearly. I think at some point, someone made a terrible design decision in Groovy. I don&amp;#8217;t know who it was, but the idea was to rely on exceptions to control the flow of resolution of properties. This means that when a property is &lt;em&gt;missing&lt;/em&gt;, typically in a closure, an exception is thrown. When a method is not found, an exception is thrown. When a property is not found, an exception is thrown. That seemed to be a good idea, because in the end, you want to provide the user with an error, but in practice, this is catastrophic, because Groovy can capture those exceptions. Typically, in a delegation chain (nested closures), a containing closure or class can actually have this property defined, or implement &lt;em&gt;property missing&lt;/em&gt;/&lt;em&gt;method missing&lt;/em&gt;. Now, re-think a second about the &quot;simple&quot; example of Gradle build above: how do you now where to look up for &lt;code&gt;message&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;signature&lt;/code&gt;, &amp;#8230;? Now you know: f* exceptions are thrown, stack traces are filled, and eventually captured because some composite dynamic object finally wants to answer the message&amp;#8230; In practice, for some builds I have profiled, it was tens of thousands of exceptions being thrown and stack traces filled for nothing. And that has a terrible impact on performance. So even if we have implemented strategies in Gradle to try to avoid throwing those exceptions (which are responsible for part of the performance improvements in 2.14), this is very hard to do it, and we&amp;#8217;re still throwing way too many of them. A static language doesn&amp;#8217;t have this problem, because every single reference in source is resolved at compile time. So, if you&amp;#8217;re writing a plugin in Groovy, for the sake of performance, please add &lt;code&gt;@CompileStatic&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So there goes Kotlin. Kotlin has excellent static builders support, that make it practical both for IDE support, which will dramatically improve user experience in terms of understanding what do write, what is an error, having documentation, refactorings, &amp;#8230; and is a very pleasant language to work with. Honestly, I don&amp;#8217;t have anything bad to say about the language (apart from the &lt;em&gt;fun&lt;/em&gt; keyword that I don&amp;#8217;t like). To some degree, it&amp;#8217;s not very surprising: Kotlin has heavily inspired by Groovy and another popular JVM language: Scala. And again, being the one behind the static compiler of Groovy, I can&amp;#8217;t blame them for doing what I like about static languages. Their builder support is awesome, and very elegant. And it&amp;#8217;s supported out of the box by IntelliJ of course, but also Eclipse.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a_static_dsl_for_groovy&quot;&gt;A static DSL for Groovy?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, so one might think at this point that I&amp;#8217;m mad. I wrote a &quot;competing&quot; language, and I&amp;#8217;m happy to see Kotlin being promoted in Gradle. I wrote the static compiler, that is capable of doing everything Kotlin can do (minus reified generics, plus superior scripting support, type checking extensions, &amp;#8230;), so wtf? Ok, so let&amp;#8217;s be very clear: I have absolutely no doubt that Groovy can do everything that we&amp;#8217;ve done with the Kotlin support in Gradle. It can be statically compiled, provide an elegant DSL that is statically compiled, and it can be understood by the IDE. I had no doubt before the Kotlin work started, I have even less doubts now. And I can say I have no doubts because I tried it: I implemented experimental support for statically compiled Gradle scripts, written in Groovy. Here&amp;#8217;s an example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;apply plugin: &apos;java&apos;
apply plugin: &apos;eclipse&apos;
apply plugin: &apos;idea&apos;
apply plugin: &apos;groovy&apos;
apply plugin: GreetingPlugin

repositories {
    mavenCentral()
}

dependencies {
    compile &apos;commons-lang:commons-lang:2.5&apos;
    compile &quot;commons-httpclient:commons-httpclient:3.0&quot;
    compile &quot;commons-codec:commons-codec:1.2&quot;
    compile &quot;org.slf4j:jcl-over-slf4j:1.7.10&quot;
    compile &quot;org.codehaus.groovy:groovy:2.4.4&quot;
    testCompile &apos;junit:junit:4.12&apos;
    runtime &apos;com.googlecode:reflectasm:1.01&apos;
}

tasks.configure(&apos;test&apos;, Test) {
    jvmArgs &apos;-XX:MaxPermSize=512m&apos;, &apos;-XX:+HeapDumpOnOutOfMemoryError&apos;
}

dependencies {
    compile &apos;org.codehaus:groovy:groovy-all:2.4.4&apos;
}

extension(GreetingPluginExtension) {
    message = &apos;Hi&apos;
    greeter = findProperty(&apos;greeter&apos;)?:&apos;static Gradle!&apos;
}

tasks.create(&apos;dependencyReport&apos;, DependencyReportTask) {
    outputs.upToDateWhen { false }
    outputFile = new File( project.buildDir, &quot;dependencies.txt&quot;)
}

class GreetingPlugin implements Plugin&amp;lt;Project&amp;gt; {
    void apply(Project project) {
        project.extensions.create(&quot;greeting&quot;, GreetingPluginExtension)
        project.task(&apos;hello&apos;) &amp;lt;&amp;lt; {
            println &quot;${project.extension(GreetingPluginExtension).message} from ${project.extension(GreetingPluginExtension).greeter}&quot;
        }
    }
}

class GreetingPluginExtension {
    String message
    String greeter
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is an example Gradle build that is compiled statically. It has none of the problems I described about the Groovy implementation in Gradle above. It uses all the techniques that static Groovy provides: extension methods, powerful scripting with implicit imports, type checking extensions, &amp;#8230; All this works. And interestingly, the work that is done to enable support for Kotlin also benefits to statically compiled Groovy, and Java! Let&amp;#8217;s not forget about the latter, which is years behind in terms of &quot;modern&quot; languages support. So if this works, why do we need Kotlin? To be honest, I asked it to myself many times. It was very difficult to me, because I knew Groovy could do it. Again, I had no doubt about the language capabilities, no doubt about the performance impact of doing this. However, I missed two critical points:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;IDE support. Even if support of Groovy in IntelliJ is by far the most advanced of all other IDEs, it still lacks behind when static compilation is on. But more importantly, it doesn&amp;#8217;t know that my script is statically compiled, nor does it now about my custom extension methods. I tried to implement a &lt;code&gt;GDSL&lt;/code&gt; descriptor to make it aware of them, and it somehow worked: I do have code completion, but errors are not marked as errors, and the IDE still doesn&amp;#8217;t understand that it should only suggest to me what is relevant in the context. With Kotlin scripts which are &lt;em&gt;natively static&lt;/em&gt;, there&amp;#8217;s no such issue. The IDE understands everything natively, in IntelliJ and Eclipse. So, I have no doubt that Jetbrains can implement support for this, just like I had no doubt I could implement a static Groovy DSL, but who is going to write this? Me? Gradle? I don&amp;#8217;t have the time to do it. And it&amp;#8217;s not Gradle&amp;#8217;s job to write IDE plugins. And what about Eclipse? One big issue that the Groovy community has, &lt;strong&gt;today&lt;/strong&gt;, is that nobody is supporting Eclipse since Pivotal dropped sponsorship of Groovy. After more than one year, nobody took over the development of Groovy Eclipse. Nobody. While Groovy itself saw lots of new contributors, while we saw a lot of bugfixes, new contributors and that the download numbers where never as high as they are today, IDE support is critical. And nobody took over the development of it. I saw some people referring to what Jetbrains is doing as &quot;blackmailing&quot;. Seriously? Jetbrains? Think of what they&amp;#8217;ve done for Groovy. Groovy would never has been as popular as it is without them. They provided us with the best Groovy IDE possible. They are constantly supporting new features of the language, adding support for AST transformations, traits, &amp;#8230; They even added the ability, in IDEA 14, to use Groovy (and not Kotlin, guys!) as the language to evaluate expressions in the debugger. And they would try to kill Groovy? Kill part of their business? Come on guys! So yes, they invested a lot in Kotlin and want to promote it, but how could it be otherwise? And it&amp;#8217;s not like if the language sucked: it&amp;#8217;s awesome!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Does it make sense? Now that we made the decision to support Kotlin, that we proved it would provide the level of user friendliness we want and that it is statically compiled by default, does it make sense to put resources to support static Groovy in addition? I don&amp;#8217;t have an answer to this. I thought yes, but now I&amp;#8217;m not sure. Kotlin does the job. And honestly, they have great engineers working on the language. Even if it lacks behind in terms of scripting and compilation times compared to Groovy, I have no doubt they will fix it. How arrogant would we be if we thought other languages could not do what we&amp;#8217;ve done with Groovy?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_future_of_groovy&quot;&gt;The future of Groovy&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last point I want to address is what it means for the future of Groovy, and what it means for &lt;strong&gt;my&lt;/strong&gt; future in Groovy. First of all, I always thought that the future of Groovy was in the hands of its community. It&amp;#8217;s not Gradle that has Groovy&amp;#8217;s future in its hands. It&amp;#8217;s &lt;strong&gt;you&lt;/strong&gt;. The move to the Apache Software Foundation was also done for this very same reason: community first. If you want to continue to use Groovy, to improve it, to support it, all you have to do is f* do it! And I will continue! I love this language, I know too well how far it can go in terms of DSL support, AST transformations, now in 2.5 we have macros, that&amp;#8217;s just a crazily powerful language that&amp;#8217;s super fun to use. Should we fear competition? No, we shouldn&amp;#8217;t. Competition is good. It should be inspiring. And if Gradle moving to Kotlin means the death of Groovy, maybe the problem is elsewhere. And even if lots of people get introduced to Groovy through Gradle, it&amp;#8217;s not the only entry point. Grails is another. Jenkins (through Flow) is another. And many, many more. There was a tweet a few days ago which showed the 100 most popular dependencies in GitHub projects. Groovy was one of them. No Kotlin. No Scala. Groovy. It&amp;#8217;s everywhere, and it&amp;#8217;s going to be there for a long time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Part of the fears of the community is, after the Pivotal demise, if Groovy is a dying language. It&amp;#8217;s not. It has never been so widely used. The move to Apache Software Foundation drove a lot of attention and brought us many more contributors. But the community has to realize what the problems with Groovy are, and it has to face them: the introduction of the static compiler was too late. IDE support is important. Java 9 support is going to be super important. If you love your language, contribute. Help it. Help yourselves. The future of Groovy &lt;strong&gt;must&lt;/strong&gt; be in your hands. I can&amp;#8217;t recall how many times I told this, since I joined VMware, a few years ago, to develop Groovy. In every talk I give, I&amp;#8217;m always telling how important it is that &lt;strong&gt;you&lt;/strong&gt; contribute. Jetbrains is not going to write Groovy Eclipse for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And I would like to finish with one word: if people move from Groovy to Kotlin, is it really a problem? Isn&amp;#8217;t any technology inspired by another? Aren&amp;#8217;t we, developers, always rebuilding the same things, but improving them, learning lessons from the past? Is Kotlin a better Groovy? I don&amp;#8217;t have the answer yet. Maybe it is. Maybe not. Today Groovy remains greatly superior in terms of scripting, DSL support, but it comes with a price that Gradle doesn&amp;#8217;t want to pay. And let&amp;#8217;s not forget the original community of Groovy: a &lt;strong&gt;dynamic&lt;/strong&gt; language for the JVM. There are still &lt;strong&gt;lots&lt;/strong&gt; of people who like this aspect of the language (and I do too, typically when I write Groovy scripts in place of bash scripts, I don&amp;#8217;t care about types). It&amp;#8217;s compile time metaprogramming features also make it incredibly powerful. Modern Groovy definitely doesn&amp;#8217;t deserve its &quot;bad press&quot;. Would you compare Java 8 with Java 1? No. So don&amp;#8217;t compare Groovy 2.4 with Groovy 1 either. Reputation should change, and you can help there too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This leads me to what I should do. And there, I&amp;#8217;m a bit lost, to be honest. I work for a company that embraced Groovy, that is now embracing Kotlin. I love my job, I love working with Gradle, I love Groovy, and I quite enjoy Kotlin. I&amp;#8217;m a passionate developer. I just want to continue having fun. But if you think that as such, I&amp;#8217;m not a good representative of the Groovy community anymore, maybe I should step off from the Groovy project. I would hate that, but I&amp;#8217;ve kind of been hurt by the bad comments we (Gradle) received from some members of the Groovy community. I don&amp;#8217;t want to fall into a language war, I don&amp;#8217;t care about this. I care about users. What I love to do is helping people, period.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would like to finish this post with a thought about what I&amp;#8217;m going to do, as a Gradle developer, for you, Groovy users. In particular, I am convinced that the success of Gradle is largely due to its Groovy DSL, despite its problems. The fact that it&amp;#8217;s simple, easy to read, is super important. I joined the Groovy project because I was using Groovy as a DSL platform in a natural language processing context. Groovy is super powerful for this. And I learnt a lot in terms of DSL design. In particular, I will try to make sure that it doesn&amp;#8217;t become a Kotlin API. What I mean by that is that I think we should elevate from a Groovy DSL to a Gradle language. And this language is meant at &lt;strong&gt;describing&lt;/strong&gt; builds. And our users are not Kotlin developers. Most of them are not Groovy developers either. They are, as I described earlier, from different horizons. And I would hate if a user would have to understand concepts like generics or type inference to write a build script. That would be horribly wrong. A build author should understand how to &lt;em&gt;model an application&lt;/em&gt;, not what is a type, what is an extension method, or generic return type inference. It&amp;#8217;s different for &lt;em&gt;plugin authors&lt;/em&gt;, but for a &lt;em&gt;build author&lt;/em&gt;, it&amp;#8217;s super important. So I will try to make sure that Kotlin scripting support improves, even if it means that it would go even closer to what Groovy supports. I would do this not because I want Groovy to die, I don&amp;#8217;t (and it wouldn&amp;#8217;t help my royalties for Groovy in Action 2 ;)), but it would help users or Gradle. That&amp;#8217;s what I care most about, just like I care about what Groovy users want when I work on the Groovy project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As for talking about Gradle, Groovy and its future, I&amp;#8217;ll be a GR8Conf next week, I&amp;#8217;d be happy to answer you in person there too!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Keep on Groovying!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
